<%
  def p_arr(property)
    p(property,nil) || []
  end

  def build_db_url(db_name, job_name)
    db_scheme = p("autoscaler.#{db_name}.db_scheme")
    db_address = p("autoscaler.#{db_name}.address")
    db_port = p("autoscaler.#{db_name}.port")
    db_roles = p_arr("autoscaler.#{db_name}.roles")
    db_dbs = p_arr("autoscaler.#{db_name}.databases")
    db_role = db_roles.find { |role| role['tag'] == db_name.tr('_', '') } ||  db_roles.find { |role| role['tag'] == 'default' }
    db_database = db_dbs.find { |database| database['tag'] == db_name.tr('_', '') } || db_dbs.find { |database| database['tag'] == 'default' }

    if db_scheme == "postgres"
      db_url = "#{db_scheme}://#{ERB::Util.url_encode(db_role['name'])}:#{ERB::Util.url_encode(db_role['password'])}@#{db_address}:#{db_port}/#{db_database['name']}?application_name=#{job_name}&sslmode=" + p("autoscaler.#{db_name}.sslmode")
    else
      db_url = "#{db_role['name']}:#{db_role['password']}@tcp(#{db_address}:#{db_port})/#{db_database['name']}?tls=" + p("autoscaler.#{db_name}.sslmode")
    end
    append_db_tls_configs(db_name, db_url, job_name)
  end

  def append_db_tls_configs(db_name, db_url, job_name)
  unless p("autoscaler.#{db_name}.tls.ca") == ""
    db_url = "#{db_url}&sslrootcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/ca.crt"
  end
  unless p("autoscaler.#{db_name}.tls.certificate") == ""
    db_url = "#{db_url}&sslcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/crt"
  end
  unless p("autoscaler.#{db_name}.tls.private_key") == ""
    db_url = "#{db_url}&sslkey=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/key"
  end
  db_url
end
  job_name = 'metricsgateway'
  policy_db_url = build_db_url('policy_db', job_name)

  metricsserver_sorted_instances=link("metricsserver").instances.sort_by {|i|i.address}
  metricsserver_addrs=metricsserver_sorted_instances.map{|i| "'wss://#{i.address}:#{link("metricsserver").p('autoscaler.metricsserver.collector.port')}'"}
  metricsserver_nodeAddrs="[" + metricsserver_addrs.join(",") +"]"  
%>
###########################################
#           Template Main                 #
###########################################
logging:
  level: <%= p("autoscaler.metricsgateway.logging.level") %>
envelop_chan_size: <%= p("autoscaler.metricsgateway.envelop_chan_size") %>
nozzle_count: <%= p("autoscaler.metricsgateway.nozzle_count") %>
metric_server_addrs: <%= metricsserver_nodeAddrs %>
app_manager:
  app_refresh_interval: <%= p("autoscaler.metricsgateway.app_manager.app_refresh_interval") %>
  policy_db:
    url: <%= policy_db_url %>
    max_open_connections: <%= p("autoscaler.policy_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.policy_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.policy_db_connection_config.connection_max_lifetime") %>
emitter:
  metrics_server_client_tls: 
    key_file: /var/vcap/jobs/metricsgateway/config/certs/metricsserver_client/server.key
    cert_file: /var/vcap/jobs/metricsgateway/config/certs/metricsserver_client/server.crt
    ca_file: /var/vcap/jobs/metricsgateway/config/certs/metricsserver_client/ca.crt
  buffer_size: <%= p("autoscaler.metricsgateway.emitter.buffer_size") %>
  keep_alive_interval: <%= p("autoscaler.metricsgateway.emitter.keep_alive_interval") %>
  handshake_timeout: <%= p("autoscaler.metricsgateway.emitter.handshake_timeout") %>
  max_setup_retry_count: <%= p("autoscaler.metricsgateway.emitter.max_setup_retry_count") %>
  max_close_retry_count: <%= p("autoscaler.metricsgateway.emitter.max_close_retry_count") %>
  retry_delay: <%= p("autoscaler.metricsgateway.emitter.retry_delay") %>
nozzle:
  rlp_client_tls:
    key_file: /var/vcap/jobs/metricsgateway/config/certs/reverselogproxy_client/client.key
    cert_file: /var/vcap/jobs/metricsgateway/config/certs/reverselogproxy_client/client.crt
    ca_file: /var/vcap/jobs/metricsgateway/config/certs/reverselogproxy_client/ca.crt
  rlp_addr: <%= p("autoscaler.metricsgateway.nozzle.rlp_addr") %>
  shard_id: <%= p("autoscaler.metricsgateway.nozzle.shard_id") %>
health:
  port: <%= p("autoscaler.metricsgateway.health.port") %>
  username: <%= p("autoscaler.metricsgateway.health.username") %>
  password: <%= p("autoscaler.metricsgateway.health.password") %>
  unprotected_endpoints: <%= p("autoscaler.metricsgateway.health.unprotected_endpoints") %>
  readiness_enabled: <%= p("autoscaler.metricsgateway.health.readiness_enabled") %>

