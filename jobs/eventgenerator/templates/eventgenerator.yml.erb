<%
  def p_arr(property)
    p(property,nil) || []
  end

  policy_db_scheme = p('policy_db.db_scheme')
  policy_db_address = p('policy_db.address')
  policy_db_port = p('policy_db.port')
  policy_db_role = p_arr('policy_db.roles').find { |role| role['tag'] == 'policydb' or role['tag'] == 'default' } 
  policy_db_database = p_arr('policy_db.databases').find { |database| database['tag'] == 'policydb' or database['tag'] == 'default' } 
  policy_db_url = policy_db_scheme + "://" + policy_db_role['name'] + ":" + policy_db_role['password'] + "@" + policy_db_address + ":" + policy_db_port.to_s + "/" + policy_db_database['name'] + "?sslmode=disable"


  app_metrics_db_scheme = p('appmetrics_db.db_scheme')
  app_metrics_db_address = p('appmetrics_db.address')
  app_metrics_db_port = p('appmetrics_db.port')
  app_metrics_db_role = p_arr('appmetrics_db.roles').find { |role| role['tag'] == 'appmetricsdb' or role['tag'] == 'default' }
  app_metrics_db_database = p_arr('appmetrics_db.databases').find { |database| database['tag'] == 'appmetricsdb' or database['tag'] == 'default' }
  app_metrics_db_url = app_metrics_db_scheme + "://" + app_metrics_db_role['name'] + ":" + app_metrics_db_role['password'] + "@" + app_metrics_db_address + ":" + app_metrics_db_port.to_s + "/" + app_metrics_db_database['name'] + "?sslmode=disable"

  lock_db_scheme = p('lock_db.db_scheme')
  lock_db_address = p('lock_db.address')
  lock_db_port = p('lock_db.port')
  lock_db_role = p_arr('lock_db.roles').find { |role| role['tag'] == 'lockdb' or role['tag'] == 'default'  }
  lock_db_database = p_arr('lock_db.databases').find { |database| database['tag'] == 'lockdb' or database['tag'] == 'default' }
  lock_db_url = lock_db_scheme + "://" + lock_db_role['name'] + ":" + lock_db_role['password'] + "@" + lock_db_address + ":" + lock_db_port.to_s + "/" + lock_db_database['name'] + "?sslmode=disable"
%>


server:
  port:  <%= p("eventgenerator.server.port") %>

logging:
  level: <%= p("eventgenerator.logging.level") %>

db:
  policy_db_url: <%= policy_db_url %>
  app_metrics_db_url: <%= app_metrics_db_url %>

aggregator: 
  aggregator_execute_interval: <%= p("eventgenerator.aggregator.aggregator_execute_interval") %>
  policy_poller_interval: <%= p("eventgenerator.aggregator.policy_poller_interval") %>
  metric_poller_count: <%= p("eventgenerator.aggregator.metric_poller_count") %>
  app_monitor_channel_size: <%= p("eventgenerator.aggregator.app_monitor_channel_size") %>

evaluator:
  evaluation_manager_execute_interval: <%= p("eventgenerator.evaluator.evaluation_manager_execute_interval") %>
  evaluator_count: <%= p("eventgenerator.evaluator.evaluator_count") %>
  trigger_array_channel_size: <%= p("eventgenerator.evaluator.trigger_array_channel_size") %>

scalingEngine:
  scaling_engine_url: https://<%= p("eventgenerator.scaling_engine.host") %>:<%= p("eventgenerator.scaling_engine.port") %>
  tls:
    key_file: /var/vcap/jobs/eventgenerator/config/certs/scalingengine/client.key
    cert_file: /var/vcap/jobs/eventgenerator/config/certs/scalingengine/client.crt
    ca_file: /var/vcap/jobs/eventgenerator/config/certs/scalingengine/ca.crt
metricCollector:
  metric_collector_url: https://<%= p("eventgenerator.metricscollector.host") %>:<%= p("eventgenerator.metricscollector.port") %>
  tls:
    key_file: /var/vcap/jobs/eventgenerator/config/certs/metricscollector/client.key
    cert_file: /var/vcap/jobs/eventgenerator/config/certs/metricscollector/client.crt
    ca_file: /var/vcap/jobs/eventgenerator/config/certs/metricscollector/ca.crt

lock:
  lock_ttl: <%= p("eventgenerator.lock.lock_ttl") %>
  lock_retry_interval: <%= p("eventgenerator.lock.lock_retry_interval") %>
  consul_cluster_config: <%= p("eventgenerator.lock.consul_cluster_config") %>

defaultStatWindowSecs: <%= p("eventgenerator.defaultStatWindowSecs") %>
defaultBreachDurationSecs: <%= p("eventgenerator.defaultBreachDurationSecs") %>

db_lock:
  url: <%= lock_db_url %>

enable_db_lock: <%= p("eventgenerator.enable_db_lock") %>