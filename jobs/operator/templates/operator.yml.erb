<%
  def p_arr(property)
    p(property,nil) || []
  end

  policy_db_scheme = p('autoscaler.policy_db.db_scheme')
  policy_db_address = p('autoscaler.policy_db.address')
  policy_db_port = p('autoscaler.policy_db.port')
  policy_db_role = p_arr('autoscaler.policy_db.roles').find { |role| role['tag'] == 'policydb' or role['tag'] == 'default'  }
  policy_db_database = p_arr('autoscaler.policy_db.databases').find { |database| database['tag'] == 'policydb' or database['tag'] == 'default' }
  policy_db_url = policy_db_scheme + "://" + policy_db_role['name'] + ":" + policy_db_role['password'] + "@" + policy_db_address + ":" + policy_db_port.to_s + "/" + policy_db_database['name'] + "?sslmode=disable"

  instance_metrics_db_scheme = p('autoscaler.instancemetrics_db.db_scheme')
  instance_metrics_db_address = p('autoscaler.instancemetrics_db.address')
  instance_metrics_db_port = p('autoscaler.instancemetrics_db.port')
  instance_metrics_db_role = p_arr('autoscaler.instancemetrics_db.roles').find { |role| role['tag'] == 'instancemetricsdb' or role['tag'] == 'default' } 
  instance_metrics_db_database = p_arr('autoscaler.instancemetrics_db.databases').find { |database| database['tag'] == 'instancemetricsdb' or database['tag'] == 'default' } 
  instance_metrics_db_url = instance_metrics_db_scheme + "://" + instance_metrics_db_role['name'] + ":" + instance_metrics_db_role['password'] + "@" + instance_metrics_db_address + ":" + instance_metrics_db_port.to_s + "/" + instance_metrics_db_database['name'] + "?sslmode=disable"
  
  app_metrics_db_scheme = p('autoscaler.appmetrics_db.db_scheme')
  app_metrics_db_address = p('autoscaler.appmetrics_db.address')
  app_metrics_db_port = p('autoscaler.appmetrics_db.port')
  app_metrics_db_role = p_arr('autoscaler.appmetrics_db.roles').find { |role| role['tag'] == 'appmetricsdb' or role['tag'] == 'default' }
  app_metrics_db_database = p_arr('autoscaler.appmetrics_db.databases').find { |database| database['tag'] == 'appmetricsdb' or database['tag'] == 'default' }
  app_metrics_db_url = app_metrics_db_scheme + "://" + app_metrics_db_role['name'] + ":" + app_metrics_db_role['password'] + "@" + app_metrics_db_address + ":" + app_metrics_db_port.to_s + "/" + app_metrics_db_database['name'] + "?sslmode=disable"

  scaling_engine_db_scheme = p('autoscaler.scalingengine_db.db_scheme')
  scaling_engine_db_address = p('autoscaler.scalingengine_db.address')
  scaling_engine_db_port = p('autoscaler.scalingengine_db.port')
  scaling_engine_db_role = p_arr('autoscaler.scalingengine_db.roles').find { |role| role['tag'] == 'scalingenginedb' or role['tag'] == 'default' }
  scaling_engine_db_database = p_arr('autoscaler.scalingengine_db.databases').find { |database| database['tag'] == 'scalingenginedb' or database['tag'] == 'default' }
  scaling_engine_db_url = scaling_engine_db_scheme + "://" + scaling_engine_db_role['name'] + ":" + scaling_engine_db_role['password'] + "@" + scaling_engine_db_address + ":" + scaling_engine_db_port.to_s + "/" + scaling_engine_db_database['name'] + "?sslmode=disable"

  lock_db_scheme = p('autoscaler.lock_db.db_scheme')
  lock_db_address = p('autoscaler.lock_db.address')
  lock_db_port = p('autoscaler.lock_db.port')
  lock_db_role = p_arr('autoscaler.lock_db.roles').find { |role| role['tag'] == 'lockdb' or role['tag'] == 'default' }
  lock_db_database = p_arr('autoscaler.lock_db.databases').find { |database| database['tag'] == 'lockdb' or database['tag'] == 'default' }
  lock_db_url = lock_db_scheme + "://" + lock_db_role['name'] + ":" + lock_db_role['password'] + "@" + lock_db_address + ":" + lock_db_port.to_s + "/" + lock_db_database['name'] + "?sslmode=disable"
%>

cf:
  api:  <%= p("autoscaler.cf.api") %>
  grant_type: <%= p("autoscaler.cf.grant_type") %>
  client_id: <%= p("autoscaler.cf.client_id") %>
  secret: <%= p("autoscaler.cf.secret") %>
  skip_ssl_validation: <%= p("autoscaler.cf.skip_ssl_validation") %>


logging:
  level: <%= p("autoscaler.operator.logging.level") %>
health:
  port: <%= p("autoscaler.operator.health.port") %>
http_client_timeout: <%= p("autoscaler.operator.http_client_timeout") %>
instance_metrics_db:
  db:
    url: <%= instance_metrics_db_url %>
    max_open_connections: <%= p("autoscaler.instancemetrics_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.instancemetrics_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.instancemetrics_db_connection_config.connection_max_lifetime") %>
  refresh_interval: <%= p("autoscaler.operator.instance_metrics_db.refresh_interval") %>
  cutoff_duration: <%= p("autoscaler.operator.instance_metrics_db.cutoff_duration") %>

app_metrics_db:
  db:
    url: <%= app_metrics_db_url %>
    max_open_connections: <%= p("autoscaler.appmetrics_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.appmetrics_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.appmetrics_db_connection_config.connection_max_lifetime") %>
  refresh_interval: <%= p("autoscaler.operator.app_metrics_db.refresh_interval") %>
  cutoff_duration: <%= p("autoscaler.operator.app_metrics_db.cutoff_duration") %>

scaling_engine_db:
  db:
    url: <%= scaling_engine_db_url %>
    max_open_connections: <%= p("autoscaler.scalingengine_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.scalingengine_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.scalingengine_db_connection_config.connection_max_lifetime") %>
  refresh_interval: <%= p("autoscaler.operator.scaling_engine_db.refresh_interval") %>
  cutoff_duration: <%= p("autoscaler.operator.scaling_engine_db.cutoff_duration") %>

scaling_engine:
  scaling_engine_url: https://<%= p("autoscaler.operator.scaling_engine.host") %>:<%= p("autoscaler.operator.scaling_engine.port") %>
  sync_interval: <%= p("autoscaler.operator.scaling_engine.sync_interval") %>
  tls:
    key_file: /var/vcap/jobs/operator/config/certs/scalingengine/client.key
    cert_file: /var/vcap/jobs/operator/config/certs/scalingengine/client.crt
    ca_file: /var/vcap/jobs/operator/config/certs/scalingengine/ca.crt

scheduler:
  scheduler_url: https://<%= p("autoscaler.operator.scheduler.host") %>:<%= p("autoscaler.operator.scheduler.port") %>
  sync_interval: <%= p("autoscaler.operator.scheduler.sync_interval") %>
  tls:
    key_file: /var/vcap/jobs/operator/config/certs/scheduler/client.key
    cert_file: /var/vcap/jobs/operator/config/certs/scheduler/client.crt
    ca_file: /var/vcap/jobs/operator/config/certs/scheduler/ca.crt

app_syncer:
  db:
    url: <%= policy_db_url %>
    max_open_connections: <%= p("autoscaler.policy_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.policy_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.policy_db_connection_config.connection_max_lifetime") %>
  sync_interval:  <%= p("autoscaler.operator.app_sync_interval")  %>

lock:
  lock_ttl: <%= p("autoscaler.operator.lock.lock_ttl") %>
  lock_retry_interval: <%= p("autoscaler.operator.lock.lock_retry_interval") %>
  consul_cluster_config: <%= p("autoscaler.operator.lock.consul_cluster_config") %>

db_lock:
  ttl:  <%= p("autoscaler.operator.db_lock.ttl") %>
  retry_interval: <%= p("autoscaler.operator.db_lock.retry_interval") %>
  db:
    url: <%= lock_db_url %>
    max_open_connections: <%= p("autoscaler.lock_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.lock_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.lock_db_connection_config.connection_max_lifetime") %>
enable_db_lock: <%= p("autoscaler.operator.enable_db_lock") %>