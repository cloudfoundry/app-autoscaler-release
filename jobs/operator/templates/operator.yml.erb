<%
  def p_arr(property)
    p(property,nil) || []
  end

  def build_db_url(db_name, job_name)
    db_scheme = p("autoscaler.#{db_name}.db_scheme")
    db_address = p("autoscaler.#{db_name}.address")
    db_port = p("autoscaler.#{db_name}.port")
    db_roles = p_arr("autoscaler.#{db_name}.roles")
    db_dbs = p_arr("autoscaler.#{db_name}.databases")
    db_role = db_roles.find { |role| role['tag'] == db_name.tr('_', '') } ||  db_roles.find { |role| role['tag'] == 'default' }
    db_database = db_dbs.find { |database| database['tag'] == db_name.tr('_', '') } || db_dbs.find { |database| database['tag'] == 'default' }

    if db_scheme == "postgres"
      db_url = "#{db_scheme}://#{ERB::Util.url_encode(db_role['name'])}:#{ERB::Util.url_encode(db_role['password'])}@#{db_address}:#{db_port}/#{db_database['name']}?application_name=#{job_name}&sslmode=" + p("autoscaler.#{db_name}.sslmode")
    else
      db_url = "#{db_role['name']}:#{db_role['password']}@tcp(#{db_address}:#{db_port})/#{db_database['name']}?tls=" + p("autoscaler.#{db_name}.sslmode")
    end
    append_db_tls_configs(db_name, db_url, job_name)
  end

  def append_db_tls_configs(db_name, db_url, job_name)
  unless p("autoscaler.#{db_name}.tls.ca") == ""
    db_url = "#{db_url}&sslrootcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/ca.crt"
  end
  unless p("autoscaler.#{db_name}.tls.certificate") == ""
    db_url = "#{db_url}&sslcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/crt"
  end
  unless p("autoscaler.#{db_name}.tls.private_key") == ""
    db_url = "#{db_url}&sslkey=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/key"
  end
  db_url
end
  job_name = 'operator'
  policy_db_url = build_db_url('policy_db', job_name)
  instance_metrics_db_url = build_db_url('instancemetrics_db', job_name)
  app_metrics_db_url = build_db_url('appmetrics_db', job_name)
  scaling_engine_db_url = build_db_url('scalingengine_db', job_name)
  lock_db_url = build_db_url('lock_db', job_name)
%>
###########################################
#           Template Main                 #
###########################################
cf:
  api:  <%= p("autoscaler.cf.api") %>
  client_id: <%= p("autoscaler.cf.client_id") %>
  secret: <%= p("autoscaler.cf.secret") %>
  skip_ssl_validation: <%= p("autoscaler.cf.skip_ssl_validation") %>
  max_retries: <%= p("autoscaler.cf.max_retries") %>
  max_retry_wait_ms: <%= p("autoscaler.cf.max_retry_wait_ms") %>
  idle_connection_timeout_ms: <%= p("autoscaler.cf.idle_connection_timeout_ms") %>
  max_idle_conns_per_host_ms: <%= p("autoscaler.cf.max_idle_conns_per_host_ms") %>

logging:
  level: <%= p("autoscaler.operator.logging.level") %>

health:
  port: <%= p("autoscaler.operator.health.port") %>
  username: <%= p("autoscaler.operator.health.username") %>
  password: <%= p("autoscaler.operator.health.password") %>
  unprotected_endpoints: <%= p("autoscaler.operator.health.unprotected_endpoints") %>
  readiness_enabled: <%= p("autoscaler.operator.health.readiness_enabled") %>
http_client_timeout: <%= p("autoscaler.operator.http_client_timeout") %>
instance_metrics_db:
  db:
    url: <%= instance_metrics_db_url %>
    max_open_connections: <%= p("autoscaler.instancemetrics_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.instancemetrics_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.instancemetrics_db_connection_config.connection_max_lifetime") %>
  refresh_interval: <%= p("autoscaler.operator.instance_metrics_db.refresh_interval") %>
  cutoff_duration: <%= p("autoscaler.operator.instance_metrics_db.cutoff_duration") %>

app_metrics_db:
  db:
    url: <%= app_metrics_db_url %>
    max_open_connections: <%= p("autoscaler.appmetrics_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.appmetrics_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.appmetrics_db_connection_config.connection_max_lifetime") %>
  refresh_interval: <%= p("autoscaler.operator.app_metrics_db.refresh_interval") %>
  cutoff_duration: <%= p("autoscaler.operator.app_metrics_db.cutoff_duration") %>

scaling_engine_db:
  db:
    url: <%= scaling_engine_db_url %>
    max_open_connections: <%= p("autoscaler.scalingengine_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.scalingengine_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.scalingengine_db_connection_config.connection_max_lifetime") %>
  refresh_interval: <%= p("autoscaler.operator.scaling_engine_db.refresh_interval") %>
  cutoff_duration: <%= p("autoscaler.operator.scaling_engine_db.cutoff_duration") %>

scaling_engine:
  scaling_engine_url: https://<%= p("autoscaler.operator.scaling_engine.host") %>:<%= p("autoscaler.operator.scaling_engine.port") %>
  sync_interval: <%= p("autoscaler.operator.scaling_engine.sync_interval") %>
  tls:
    key_file: /var/vcap/jobs/operator/config/certs/scalingengine/client.key
    cert_file: /var/vcap/jobs/operator/config/certs/scalingengine/client.crt
    ca_file: /var/vcap/jobs/operator/config/certs/scalingengine/ca.crt

scheduler:
  scheduler_url: https://<%= p("autoscaler.operator.scheduler.host") %>:<%= p("autoscaler.operator.scheduler.port") %>
  sync_interval: <%= p("autoscaler.operator.scheduler.sync_interval") %>
  tls:
    key_file: /var/vcap/jobs/operator/config/certs/scheduler/client.key
    cert_file: /var/vcap/jobs/operator/config/certs/scheduler/client.crt
    ca_file: /var/vcap/jobs/operator/config/certs/scheduler/ca.crt

app_syncer:
  db:
    url: <%= policy_db_url %>
    max_open_connections: <%= p("autoscaler.policy_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.policy_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.policy_db_connection_config.connection_max_lifetime") %>
  sync_interval:  <%= p("autoscaler.operator.app_sync_interval")  %>

db_lock:
  ttl:  <%= p("autoscaler.operator.db_lock.ttl") %>
  retry_interval: <%= p("autoscaler.operator.db_lock.retry_interval") %>
  db:
    url: <%= lock_db_url %>
    max_open_connections: <%= p("autoscaler.lock_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.lock_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.lock_db_connection_config.connection_max_lifetime") %>
