<%
  def p_arr(property)
    p(property,nil) || []
  end

  def build_db_url(db_name, job_name)
    db_scheme = p("autoscaler.#{db_name}.db_scheme")
    db_address = p("autoscaler.#{db_name}.address")
    db_port = p("autoscaler.#{db_name}.port")
    db_roles = p_arr("autoscaler.#{db_name}.roles")
    db_dbs = p_arr("autoscaler.#{db_name}.databases")
    db_role = db_roles.find { |role| role['tag'] == db_name.tr('_', '') } ||  db_roles.find { |role| role['tag'] == 'default' }
    db_database = db_dbs.find { |database| database['tag'] == db_name.tr('_', '') } || db_dbs.find { |database| database['tag'] == 'default' }

    if db_scheme == "postgres"
      db_url = "#{db_scheme}://#{ERB::Util.url_encode(db_role['name'])}:#{ERB::Util.url_encode(db_role['password'])}@#{db_address}:#{db_port}/#{db_database['name']}?application_name=#{job_name}&sslmode=" + p("autoscaler.#{db_name}.sslmode")
    else
      db_url = "#{db_role['name']}:#{db_role['password']}@tcp(#{db_address}:#{db_port})/#{db_database['name']}?tls=" + p("autoscaler.#{db_name}.sslmode")
    end
    append_db_tls_configs(db_name, db_url, job_name)
  end

  def append_db_tls_configs(db_name, db_url, job_name)
  unless p("autoscaler.#{db_name}.tls.ca") == ""
    db_url = "#{db_url}&sslrootcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/ca.crt"
  end
  unless p("autoscaler.#{db_name}.tls.certificate") == ""
    db_url = "#{db_url}&sslcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/crt"
  end
  unless p("autoscaler.#{db_name}.tls.private_key") == ""
    db_url = "#{db_url}&sslkey=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/key"
  end
  db_url
end
  job_name = 'metricsforwarder'
  policy_db_url = build_db_url('policy_db', job_name)
  if p("autoscaler.storedprocedure_db.address") != ''
    storedprocedure_db_url = build_db_url('storedprocedure_db', job_name)
  end

%>
###########################################
#           Template Main                 #
###########################################
server:
  port: <%= p("autoscaler.metricsforwarder.server.port") %>
logging:
  level: <%= p("autoscaler.metricsforwarder.logging.level") %>
loggregator:
  metron_address: <%= p("autoscaler.metricsforwarder.loggregator.metron_address") %>
  tls:
    key_file: /var/vcap/jobs/metricsforwarder/config/certs/metron_client/client.key
    cert_file: /var/vcap/jobs/metricsforwarder/config/certs/metron_client/client.crt
    ca_file: /var/vcap/jobs/metricsforwarder/config/certs/metron_client/ca.crt
db:
  policy_db:
    url: <%= policy_db_url %>
    max_open_connections: <%= p("autoscaler.policy_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.policy_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.policy_db_connection_config.connection_max_lifetime") %>
<% if p("autoscaler.storedprocedure_db.address") != '' %>
  storedprocedure_db:
    url: <%= storedprocedure_db_url %>
    max_open_connections: <%= p("autoscaler.storedprocedure_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.storedprocedure_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.storedprocedure_db_connection_config.connection_max_lifetime") %>
<% end %>
cache_ttl: <%= p("autoscaler.metricsforwarder.cache_ttl") %>
cache_cleanup_interval: <%= p("autoscaler.metricsforwarder.cache_cleanup_interval") %>
policy_poller_interval: <%= p("autoscaler.metricsforwarder.policy_poller_interval") %>
health:
  port:  <%= p("autoscaler.metricsforwarder.health.port") %>
  username: <%= p("autoscaler.metricsforwarder.health.username") %>
  password: <%= p("autoscaler.metricsforwarder.health.password") %>
  unprotected_endpoints: <%= p("autoscaler.metricsforwarder.health.unprotected_endpoints") %>
  readiness_enabled: <%= p("autoscaler.metricsforwarder.health.readiness_enabled") %>
rate_limit:
  valid_duration: <%= p("autoscaler.metricsforwarder.rate_limit.valid_duration") %>
  max_amount: <%= p("autoscaler.metricsforwarder.rate_limit.max_amount") %>

cred_helper_impl: <%= p("autoscaler.metricsforwarder.cred_helper.impl") %>
<% if p('autoscaler.metricsforwarder.cred_helper.stored_procedure_config') != {} %>
<%= {"stored_procedure_binding_credential_config" => p("autoscaler.metricsforwarder.cred_helper.stored_procedure_config")}.to_yaml.lines[1..-1].join %>
<% end %>
