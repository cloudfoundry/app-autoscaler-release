#!/bin/bash 
<%
  # returns an empty array of the value is null
  def p_arr(property)
    p(property,nil) || []
  end

  role = p_arr('autoscaler.policy_db.roles').find { |role| role['tag'] == 'policydb' or role['tag'] == 'default'}
  database = p_arr('autoscaler.policy_db.databases').find { |database| database['tag'] == 'policydb' or  database['tag'] == 'default' }
%>
source /var/vcap/packages/common/dns-helper.sh

DB_DIR=/var/vcap/packages/db
API_DIR=/var/vcap/packages/golangapiserver

export PATH=/var/vcap/packages/java/bin:$PATH


# Getting Database config
HOST='<%= p("autoscaler.policy_db.address") %>'
DBNAME='<%= database['name'] %>'
USER='<%= role['name'] %>'
PASSWORD='<%= role['password'] %>'
PORT='<%= p("autoscaler.policy_db.port") %>'
SSLMODE='<%= p("autoscaler.policy_db.sslmode") %>'

JDBCDBURL="jdbc:postgresql://$HOST:$PORT/$DBNAME?sslmode=$SSLMODE"
DBURI="postgres://$USER:$PASSWORD@$HOST:$PORT/$DBNAME?sslmode=$SSLMODE"

<% unless p('autoscaler.policy_db.tls.ca') == "" %>
JDBCDBURL=$JDBCDBURL"&sslrootcert=/var/vcap/jobs/golangapiserver/config/certs/policy_db/ca.crt"
DBURI=$DBURI"&sslrootcert=/var/vcap/jobs/golangapiserver/config/certs/policy_db/ca.crt"
<% end %>

detect_dns $HOST $PORT

/var/vcap/packages/changeloglockcleaner/changeloglockcleaner -d "$DBURI" -e <%= p("autoscaler.changeloglock_timeout_seconds") %>

java -cp "$DB_DIR/target/lib/*" liquibase.integration.commandline.Main --url "$JDBCDBURL" --username=$USER --password=$PASSWORD \
--driver=org.postgresql.Driver --changeLogFile=$API_DIR/api.db.changelog.yml update

java -cp "$DB_DIR/target/lib/*" liquibase.integration.commandline.Main --url "$JDBCDBURL" --username=$USER --password=$PASSWORD \
--driver=org.postgresql.Driver --changeLogFile=$API_DIR/servicebroker.db.changelog.json update




