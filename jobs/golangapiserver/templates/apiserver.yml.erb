<%
require 'yaml'
  def p_arr(property)
    p(property,nil) || []
  end

  def build_db_url(db_name, job_name)
    db_scheme = p("autoscaler.#{db_name}.db_scheme")
    db_address = p("autoscaler.#{db_name}.address")
    db_port = p("autoscaler.#{db_name}.port")
    db_roles = p_arr("autoscaler.#{db_name}.roles")
    db_dbs = p_arr("autoscaler.#{db_name}.databases")
    db_role = db_roles.find { |role| role['tag'] == db_name.tr('_', '') } ||  db_roles.find { |role| role['tag'] == 'default' }
    db_database = db_dbs.find { |database| database['tag'] == db_name.tr('_', '') } || db_dbs.find { |database| database['tag'] == 'default' }

    if db_scheme == "postgres"
      db_url = "#{db_scheme}://#{ERB::Util.url_encode(db_role['name'])}:#{ERB::Util.url_encode(db_role['password'])}@#{db_address}:#{db_port}/#{db_database['name']}?application_name=#{job_name}&sslmode=" + p("autoscaler.#{db_name}.sslmode")
    else
      db_url = "#{db_role['name']}:#{db_role['password']}@tcp(#{db_address}:#{db_port})/#{db_database['name']}?tls=" + p("autoscaler.#{db_name}.sslmode")
    end
    append_db_tls_configs(db_name, db_url, job_name)
  end

  def append_db_tls_configs(db_name, db_url, job_name)
    unless p("autoscaler.#{db_name}.tls.ca") == ""
      db_url = "#{db_url}&sslrootcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/ca.crt"
    end
    unless p("autoscaler.#{db_name}.tls.certificate") == ""
      db_url = "#{db_url}&sslcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/crt"
    end
    unless p("autoscaler.#{db_name}.tls.private_key") == ""
      db_url = "#{db_url}&sslkey=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/key"
    end
    db_url
  end

###########################################
#           Template Main                 #
###########################################
  job_name = 'golangapiserver'
  if p("autoscaler.apiserver.use_buildin_mode") == false
    binding_db_url = build_db_url('binding_db', job_name)
  end
  policy_db_url = build_db_url('policy_db', job_name)
  if p("autoscaler.storedprocedure_db.address") != ''
    storedprocedure_db_url = build_db_url('storedprocedure_db', job_name)
  end
%>

logging:
  level: <%= p("autoscaler.apiserver.logging.level") %>
cf:
  api:  <%= p("autoscaler.cf.api") %>
  client_id: <%= p("autoscaler.cf.client_id") %>
  secret: <%= p("autoscaler.cf.secret") %>
  skip_ssl_validation: <%= p("autoscaler.cf.skip_ssl_validation") %>
  max_retries: <%= p("autoscaler.cf.max_retries") %>
  max_retry_wait_ms: <%= p("autoscaler.cf.max_retry_wait_ms") %>
  idle_connection_timeout_ms: <%= p("autoscaler.cf.idle_connection_timeout_ms") %>
  max_idle_conns_per_host_ms: <%= p("autoscaler.cf.max_idle_conns_per_host_ms") %>

public_api_server:
  port:  <%= p("autoscaler.apiserver.public_api.server.port") %>
  <% if_p("autoscaler.apiserver.public_api.server.ca_cert", "autoscaler.apiserver.public_api.server.server_cert", "autoscaler.apiserver.public_api.server.server_key") do %>
  tls:
    ca_file: /var/vcap/jobs/golangapiserver/config/certs/apiserver/ca.crt
    cert_file: /var/vcap/jobs/golangapiserver/config/certs/apiserver/server.crt
    key_file: /var/vcap/jobs/golangapiserver/config/certs/apiserver/server.key
  <% end %>

<% if p("autoscaler.apiserver.use_buildin_mode") == false %>
broker_server:
  port:  <%= p("autoscaler.apiserver.broker.server.port") %>
  <% if_p("autoscaler.apiserver.broker.server.ca_cert", "autoscaler.apiserver.broker.server.server_cert", "autoscaler.apiserver.broker.server.server_key") do %>
  tls:
    ca_file: /var/vcap/jobs/golangapiserver/config/certs/brokerserver/ca.crt
    cert_file: /var/vcap/jobs/golangapiserver/config/certs/brokerserver/server.crt
    key_file: /var/vcap/jobs/golangapiserver/config/certs/brokerserver/server.key
  <% end %>

<% if p("autoscaler.apiserver.broker.broker_credentials") != '' %>
<%= {'broker_credentials' => p('autoscaler.apiserver.broker.broker_credentials')}.to_yaml.lines[1..-1].join %>
<% else %>
broker_credentials:
- broker_username: <%= p("autoscaler.apiserver.broker.username") %>
  broker_password: <%= p("autoscaler.apiserver.broker.password") %>
<% end %>

catalog_path: /var/vcap/jobs/golangapiserver/config/catalog.json
catalog_schema_path: /var/vcap/packages/golangapiserver/catalog.schema.json
<% end %>
info_file_path: /var/vcap/jobs/golangapiserver/config/info.json
policy_schema_path: /var/vcap/packages/golangapiserver/policy_json.schema.json
dashboard_redirect_uri: <%= p("autoscaler.apiserver.broker.server.dashboard_redirect_uri") %>
use_buildin_mode: <%= p("autoscaler.apiserver.use_buildin_mode") %>

health:
  port: <%= p("autoscaler.apiserver.health.port") %>
  username: <%= p("autoscaler.apiserver.health.username") %>
  username_hash: <%= p("autoscaler.apiserver.health.username_hash") %>
  password: <%= p("autoscaler.apiserver.health.password") %>
  password_hash: <%= p("autoscaler.apiserver.health.password_hash") %>
  unprotected_endpoints: <%= p("autoscaler.apiserver.health.unprotected_endpoints") %>
  readiness_enabled: <%= p("autoscaler.apiserver.health.readiness_enabled") %>

db:
  policy_db:
    url: <%= policy_db_url %>
    max_open_connections: <%= p("autoscaler.policy_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.policy_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.policy_db_connection_config.connection_max_lifetime") %>
<% if p("autoscaler.apiserver.use_buildin_mode") == false %>
  binding_db:
    url: <%= binding_db_url %>
    max_open_connections: <%= p("autoscaler.binding_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.binding_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.binding_db_connection_config.connection_max_lifetime") %>
<% end %>
<% if p("autoscaler.storedprocedure_db.address") != '' %>
  storedprocedure_db:
    url: <%= storedprocedure_db_url %>
    max_open_connections: <%= p("autoscaler.storedprocedure_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.storedprocedure_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.storedprocedure_db_connection_config.connection_max_lifetime") %>
<% end %>

scaling_engine:
  scaling_engine_url: https://<%= p("autoscaler.apiserver.scaling_engine.host") %>:<%= p("autoscaler.apiserver.scaling_engine.port") %>
  tls:
    key_file: /var/vcap/jobs/golangapiserver/config/certs/scalingengine/client.key
    cert_file: /var/vcap/jobs/golangapiserver/config/certs/scalingengine/client.crt
    ca_file: /var/vcap/jobs/golangapiserver/config/certs/scalingengine/ca.crt

scheduler:
  scheduler_url: https://<%= p("autoscaler.apiserver.scheduler.host") %>:<%= p("autoscaler.apiserver.scheduler.port") %>
  tls:
    key_file: /var/vcap/jobs/golangapiserver/config/certs/scheduler/client.key
    cert_file: /var/vcap/jobs/golangapiserver/config/certs/scheduler/client.crt
    ca_file: /var/vcap/jobs/golangapiserver/config/certs/scheduler/ca.crt

event_generator:
  event_generator_url: https://<%= p("autoscaler.apiserver.event_generator.host") %>:<%= p("autoscaler.apiserver.event_generator.port") %>
  tls:
    key_file: /var/vcap/jobs/golangapiserver/config/certs/eventgenerator/client.key
    cert_file: /var/vcap/jobs/golangapiserver/config/certs/eventgenerator/client.crt
    ca_file: /var/vcap/jobs/golangapiserver/config/certs/eventgenerator/ca.crt

metrics_forwarder:
  metrics_forwarder_url: https://<%= p("autoscaler.apiserver.metrics_forwarder.host") %>
<% if p("autoscaler.apiserver.metrics_forwarder.mtls_host") !="" %>
  metrics_forwarder_mtls_url: https://<%= p("autoscaler.apiserver.metrics_forwarder.mtls_host") %>
<% end %>

scaling_rules:
  cpu:
    lower_threshold: <%= p("autoscaler.apiserver.scaling_rules.cpu.lower_threshold") %>
    upper_threshold: <%= p("autoscaler.apiserver.scaling_rules.cpu.upper_threshold") %>

rate_limit:
  valid_duration: <%= p("autoscaler.apiserver.rate_limit.valid_duration") %>
  max_amount: <%= p("autoscaler.apiserver.rate_limit.max_amount") %>

<% if p('autoscaler.apiserver.broker.plan_check') != '' %>
<%= {"plan_check" => p("autoscaler.apiserver.broker.plan_check")}.to_yaml.lines[1..-1].join %>
<% end %>

cred_helper_impl: <%= p("autoscaler.apiserver.cred_helper.impl") %>
<% if p('autoscaler.apiserver.cred_helper.stored_procedure_config') != {} %>
<%= {"stored_procedure_binding_credential_config" => p("autoscaler.apiserver.cred_helper.stored_procedure_config")}.to_yaml.lines[1..-1].join %>
<% end %>
