<% 
  # returns an empty array of the value is null
  def p_arr(property)
    p(property,nil) || []
  end
  db_scheme = p('autoscaler.binding_db.db_scheme')
  address = p('autoscaler.binding_db.address')
  db_port = p('autoscaler.binding_db.port')
  role = p_arr('autoscaler.binding_db.roles').find { |role| role['tag'] == 'bindingdb' or role['tag'] == 'default'} 
  database = p_arr('autoscaler.binding_db.databases').find { |database| database['tag'] == 'bindingdb' or database['tag'] == 'default'} 
  apiserver_host = p('autoscaler.service_broker.api_server.host')
  apiserver_port = p('autoscaler.service_broker.api_server.port')
  params = {
    'port' => p('autoscaler.service_broker.port'),
    'publicPort' => p('autoscaler.service_broker.publicPort'),
    'username' => p('autoscaler.service_broker.username'),
    'password' => p('autoscaler.service_broker.password'),
    'db' => {
       'maxConnections' => p('autoscaler.service_broker.db_config.max_connections'),
       'minConnections' => p('autoscaler.service_broker.db_config.min_connections'),
       'idleTimeout' => p('autoscaler.service_broker.db_config.idle_timeout'),
       'uri' => db_scheme + "://" + role['name'] + ":" + role['password'] + "@" + address + ":" + db_port.to_s + "/" + database['name']  ,
     },
    'apiserver' => {
        'uri' => "https://" + apiserver_host + ":"+ apiserver_port.to_s,
        'tls' => {
            'keyFile' => "/var/vcap/jobs/servicebroker/config/certs/apiserver/client.key",
            'certFile' => "/var/vcap/jobs/servicebroker/config/certs/apiserver/client.crt",
            'caCertFile' => "/var/vcap/jobs/servicebroker/config/certs/apiserver/ca.crt",
        },
    },
    'serviceCatalogPath' => "/var/vcap/jobs/servicebroker/config/catalog.json",
    'quota' => {
      'quota_switch' => p('autoscaler.service_broker.quota.quota_switch'),
      'oauth_url' => p('autoscaler.service_broker.quota.oauth_url'),
      'onboarding_service_url' => p('autoscaler.service_broker.quota.onboarding_service_url'),
      'xsuaa_client_id' => p('autoscaler.service_broker.quota.xsuaa_client_id'),
      'xsuaa_client_secret' => p('autoscaler.service_broker.quota.xsuaa_client_secret'),
      'uaa_url' => p('autoscaler.service_broker.quota.uaa_url'),
      'cf_api_service_url' => p('autoscaler.service_broker.quota.cf_api_service_url'),
      'uaa_client_id' => p('autoscaler.service_broker.quota.uaa_client_id'),
      'uaa_client_secret' => p('autoscaler.service_broker.quota.uaa_client_secret'),
      'skip_plans' => p('autoscaler.service_broker.quota.skip_plans'),
    },
    'httpRequestTimeout' => p('autoscaler.service_broker.http_request_timeout'),
    'tls' => {
        'keyFile' => "/var/vcap/jobs/servicebroker/config/certs/servicebroker/server.key",
        'certFile' => "/var/vcap/jobs/servicebroker/config/certs/servicebroker/server.crt",
        'caCertFile' => "/var/vcap/jobs/servicebroker/config/certs/servicebroker/ca.crt",
    },
    # 'publicTls' => {
    #     'keyFile' => "/var/vcap/jobs/servicebroker/config/certs/servicebroker/public_server.key",
    #     'certFile' => "/var/vcap/jobs/servicebroker/config/certs/servicebroker/public_server.crt",
    #     'caCertFile' => "/var/vcap/jobs/servicebroker/config/certs/servicebroker/public_ca.crt",
    # },
    'serviceCatalogPath' => "/var/vcap/jobs/servicebroker/config/catalog.json",
    'schemaValidationPath' => "/var/vcap/packages/servicebroker/config/catalog.schema.json",
    'dashboardRedirectUri' => p('autoscaler.service_broker.dashboard_redirect_uri')
  }
%>

<%=JSON.pretty_generate(params, :indentation => 2)%> 

