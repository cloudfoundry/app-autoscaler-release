#!/bin/bash

<%
  # returns an empty array of the value is null
  def p_arr(property)
    p(property,nil) || []
  end

  schedulerdb_role = p_arr('autoscaler.scheduler_db.roles').find { |role| role['tag'] == 'schedulerdb' or role['tag'] == 'default' } 
  schedulerdb_database = p_arr('autoscaler.scheduler_db.databases').find { |database| database['tag'] == 'schedulerdb' or database['tag'] == 'default' } 

  policydb_role = p_arr('autoscaler.policy_db.roles').find { |role| role['tag'] == 'policydb' or role['tag'] == 'default' } 
  policydb_database = p_arr('autoscaler.policy_db.databases').find { |database| database['tag'] == 'policydb' or database['tag'] == 'default' } 

%>
#datasource for application and quartz

spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://<%=p('autoscaler.scheduler_db.address')%>:<%=p('autoscaler.scheduler_db.port') %>/<%=schedulerdb_database['name'] %>
spring.datasource.username=<%=schedulerdb_role['name'] %>
spring.datasource.password=<%=schedulerdb_role['password'] %>

#datasource for policy 

spring.policyDbDataSource.driverClassName=org.postgresql.Driver
spring.policyDbDataSource.url=jdbc:postgresql://<%=p('autoscaler.policy_db.address')%>:<%=p('autoscaler.policy_db.port') %>/<%=policydb_database['name'] %>
spring.policyDbDataSource.password=<%=policydb_role['password'] %>
spring.policyDbDataSource.username=<%=policydb_role['name'] %>


#quartz job
scalingenginejob.reschedule.interval.millisecond=<%=p('autoscaler.scheduler.job_reschedule_interval_millisecond') %>
scalingenginejob.reschedule.maxcount=<%=p('autoscaler.scheduler.job_reschedule_maxcount') %>
scalingengine.notification.reschedule.maxcount=<%=p('autoscaler.scheduler.notification_reschedule_maxcount') %>

# scaling engine url
autoscaler.scalingengine.url=https://<%=p('autoscaler.scheduler.scaling_engine.host') %>:<%=p('autoscaler.scheduler.scaling_engine.port') %>

# Server key store for communication with the api server.
server.ssl.key-store=/var/vcap/data/certs/scheduler/server.p12
server.ssl.key-alias=scheduler
server.ssl.key-store-password=123456
server.ssl.key-store-type=PKCS12
server.ssl.trust-store=/var/vcap/data/certs/scheduler/cacerts
server.ssl.trust-store-password=123456
#to prevent logjam vulnerability
server.ssl.enabled-protocols[3]=TLSv1,TLSv1.1,TLSv1.2
server.ssl.ciphers[23]=TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_RC4_128_SHA,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,SSL_RSA_WITH_RC4_128_SHA


# Client key and trust store for communication with the scaling engine.
client.ssl.key-store=/var/vcap/data/certs/scalingengine/client.p12
client.ssl.key-store-password=123456
client.ssl.key-store-type=PKCS12
client.ssl.trust-store=/var/vcap/data/certs/scalingengine/cacerts
client.ssl.trust-store-password=123456
client.ssl.protocol=TLSv1.2
client.httpClientTimeout=<%=p('autoscaler.scheduler.http_client_timeout') %>

#Quartz
org.quartz.scheduler.instanceName=app-autoscaler
org.quartz.scheduler.instanceId=<%= spec.id %>

# scheduler port
server.port=<%=p('autoscaler.scheduler.port') %>
scheduler.healthserver.port=<%=p('autoscaler.scheduler.health.port') %>

spring.application.name=scheduler
spring.mvc.servlet.load-on-startup=1
spring.aop.auto=false
endpoints.enabled=false
spring.data.jpa.repositories.enabled=false
