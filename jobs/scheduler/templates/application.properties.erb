<%
  def p_arr(property)
    p(property,nil) || []
  end

  def generate_db_url(db_name, job_name)
    db_scheme = p("autoscaler.#{db_name}.db_scheme")
    db_address = p("autoscaler.#{db_name}.address")
    db_port = p("autoscaler.#{db_name}.port")
    db_role = p_arr("autoscaler.#{db_name}.roles").find { |role| role['tag'] == db_name.tr('_', '') or role['tag'] == 'default' }
    db_database = p_arr("autoscaler.#{db_name}.databases").find { |database| database['tag'] == db_name.tr('_', '') or database['tag'] == 'default' }

    if db_scheme == "postgres"
      db_url = "jdbc:postgresql://#{db_address}:#{db_port}/#{db_database["name"]}?ApplicationName=#{job_name}&sslmode=" + p("autoscaler.#{db_name}.sslmode")
      unless p("autoscaler.#{db_name}.tls.ca") == ""
        db_url = "#{db_url}&sslrootcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/ca.crt"
      end
      unless p("autoscaler.#{db_name}.tls.certificate") == ""
        db_url = "#{db_url}&sslcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/crt"
      end
      unless p("autoscaler.#{db_name}.tls.private_key") == ""
        db_url = "#{db_url}&sslkey=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/key.pk8"
      end
    else #mysql case
      db_url = "jdbc:mysql://" + db_address + ":" + db_port.to_s + "/" + db_database['name'] + "?autoReconnect=true"
      unless p('autoscaler.scheduler_db.tls.ca') == ""
        db_url = "#{db_url}&useSSL=true&requireSSL=true&verifyServerCertificate=true&enabledTLSProtocols=TLSv1.2&trustCertificateKeyStorePassword=123456&trustCertificateKeyStoreUrl=file:/var/vcap/jobs/scheduler/config/certs/scheduler_db/cacerts&trustCertificateKeyStoreType=pkcs12"
      end
    end
      db_url
  end
###########################################
#           Template Main                 #
###########################################
  job_name = 'scheduler'
  schedulerdb_role = p_arr("autoscaler.scheduler_db.roles").find { |role| role['tag'] == 'schedulerdb' or role['tag'] == 'default' }
  policydb_role = p_arr("autoscaler.policy_db.roles").find { |role| role['tag'] == 'policydb' or role['tag'] == 'default' }
  schedulerdb_url = generate_db_url('scheduler_db', job_name)
  policydb_url = generate_db_url('policy_db', job_name)
%>
#datasource for application and quartz
<% if p("autoscaler.scheduler_db.db_scheme") == "postgres" %>
spring.datasource.driverClassName=org.postgresql.Driver
<% else %>
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
<% end %>
spring.datasource.url=<%=schedulerdb_url %>
spring.datasource.username=<%=schedulerdb_role['name'] %>
spring.datasource.password=<%=schedulerdb_role['password'] %>


#datasource for policy 
<% if p("autoscaler.policy_db.db_scheme") == "postgres" %>
spring.policy-db-datasource.driverClassName=org.postgresql.Driver
<% else %>
spring.policy-db-datasource.driverClassName=com.mysql.cj.jdbc.Driver
<% end %>
spring.policy-db-datasource.url=<%=policydb_url %>
spring.policy-db-datasource.password=<%=policydb_role['password'] %>
spring.policy-db-datasource.username=<%=policydb_role['name'] %>


#quartz job
scalingenginejob.reschedule.interval.millisecond=<%=p('autoscaler.scheduler.job_reschedule_interval_millisecond') %>
scalingenginejob.reschedule.maxcount=<%=p('autoscaler.scheduler.job_reschedule_maxcount') %>
scalingengine.notification.reschedule.maxcount=<%=p('autoscaler.scheduler.notification_reschedule_maxcount') %>

# scaling engine url
autoscaler.scalingengine.url=https://<%=p('autoscaler.scheduler.scaling_engine.host') %>:<%=p('autoscaler.scheduler.scaling_engine.port') %>

# Server key store for communication with the api server.
server.ssl.key-store=/var/vcap/jobs/scheduler/config/certs/server.p12
server.ssl.key-alias=scheduler
server.ssl.key-store-password=123456
server.ssl.key-store-type=PKCS12
server.ssl.trust-store=/var/vcap/jobs/scheduler/config/certs/cacerts
server.ssl.trust-store-password=123456
#to prevent logjam vulnerability
server.ssl.enabled-protocols=TLSv1.2
server.ssl.ciphers=TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_RC4_128_SHA,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,SSL_RSA_WITH_RC4_128_SHA


# Client key and trust store for communication with the scaling engine.
client.ssl.key-store=/var/vcap/jobs/scheduler/config/certs/scalingengine/client.p12
client.ssl.key-store-password=123456
client.ssl.key-store-type=PKCS12
client.ssl.trust-store=/var/vcap/jobs/scheduler/config/certs/scalingengine/cacerts
client.ssl.trust-store-password=123456
client.ssl.protocol=TLSv1.2
client.httpClientTimeout=<%=p('autoscaler.scheduler.http_client_timeout') %>

#Quartz
spring.quartz.properties.org.quartz.scheduler.instanceName=app-autoscaler
spring.quartz.properties.org.quartz.scheduler.instanceId=<%= spec.id %>
#The the number of milliseconds the scheduler will ‘tolerate’ a trigger to pass its next-fire-time by,
# before being considered “misfired”. The default value (if not specified in  configuration) is 60000 (60 seconds)
spring.quartz.properties.org.quartz.jobStore.misfireThreshold=120000
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
spring.quartz.properties.org.quartz.jobStore.isClustered=true
spring.quartz.properties.org.quartz.threadPool.threadCount=10

# scheduler port
server.port=<%=p('autoscaler.scheduler.port') %>
scheduler.healthserver.port=<%=p('autoscaler.scheduler.health.port') %>
scheduler.healthserver.basicAuthEnabled=<%=p('autoscaler.scheduler.health.basicAuthEnabled') %>
scheduler.healthserver.username=<%=p('autoscaler.scheduler.health.username') %>
scheduler.healthserver.password=<%=p('autoscaler.scheduler.health.password') %>

spring.application.name=scheduler
spring.mvc.servlet.load-on-startup=1
spring.aop.auto=false
management.endpoints.enabled=false
spring.data.jpa.repositories.enabled=false
spring.main.allow-bean-definition-overriding=true

#User added properties
<%=p('autoscaler.scheduler.application.props')%>