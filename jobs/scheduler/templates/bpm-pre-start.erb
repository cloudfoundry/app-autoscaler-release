#!/bin/bash
set -euo pipefail

<%
  # returns an empty array of the value is null
  def p_arr(property)
    p(property,nil) || []
  end

  role = p_arr('autoscaler.scheduler_db.roles').find { |role| role['tag'] == 'schedulerdb' or role['tag'] == 'default' }
  database = p_arr('autoscaler.scheduler_db.databases').find { |database| database['tag'] == 'schedulerdb' or database['tag'] == 'default' }
%>
source /var/vcap/packages/common/dns-helper.sh
source /var/vcap/packages/common/retry-helper.sh
source /var/vcap/packages/common/cert-helper.sh

DB_DIR=/var/vcap/packages/db
SCHEDULER_DIR=/var/vcap/packages/scheduler

export PATH=/var/vcap/packages/openjdk-17/bin:$PATH

# Getting Database config
HOST='<%= p("autoscaler.scheduler_db.address") %>'
DBNAME='<%= database['name'] %>'
USER='<%= role['name'] %>'
PASSWORD='<%= role['password'] %>'
PORT='<%= p("autoscaler.scheduler_db.port") %>'
SSLMODE='<%= p("autoscaler.scheduler_db.sslmode") %>'

<% if p('autoscaler.scheduler_db.db_scheme') == "postgres" %>
  JDBCDBURL="jdbc:postgresql://$HOST:$PORT/$DBNAME?sslmode=$SSLMODE"
  DBURI="postgres://$USER:$PASSWORD@$HOST:$PORT/$DBNAME?sslmode=$SSLMODE"
  <% unless p('autoscaler.scheduler_db.tls.ca') == "" %>
    JDBCDBURL=$JDBCDBURL"&sslrootcert=/var/vcap/jobs/scheduler/config/certs/scheduler_db/ca.crt"
    DBURI=$DBURI"&sslrootcert=/var/vcap/jobs/scheduler/config/certs/scheduler_db/ca.crt"
  <% end %>
  <% unless p("autoscaler.scheduler_db.tls.certificate") == "" %>
    JDBCDBURL=$JDBCDBURL"&sslcert=/var/vcap/jobs/scheduler/config/certs/scheduler_db/crt"
    DBURI=$DBURI"&sslcert=/var/vcap/jobs/scheduler/config/certs/scheduler_db/crt"
    <% end %>
    <% unless p("autoscaler.scheduler_db.tls.private_key") == "" %>
    declare -r rsa_key_file=/var/vcap/jobs/scheduler/config/certs/scheduler_db/key
    declare -r pk8_file=/var/vcap/jobs/scheduler/config/certs/scheduler_db/key.pk8
    convert_to_pk8 "$rsa_key_file" "$pk8_file"
    JDBCDBURL=$JDBCDBURL"&sslkey=$pk8_file"
    DBURI=$DBURI"&sslkey=$rsa_key_file"
  <% end %>
# URLs for mySQL DB
<% else %>
  JDBCDBURL="jdbc:mysql://$HOST:$PORT/$DBNAME?autoReconnect=true"
  DBURI="$USER:$PASSWORD@tcp($HOST:$PORT)/$DBNAME?tls=$SSLMODE"
  <% unless p('autoscaler.scheduler_db.tls.ca') == "" %>
    declare -r scheduler_db_trust_store=/var/vcap/jobs/scheduler/config/certs/scheduler_db/cacerts
    /var/vcap/jobs/scheduler/bin/install_crt_truststore scheduler_db  scheduler_db/ca.crt "$scheduler_db_trust_store"
    JDBCDBURL=$JDBCDBURL"&useSSL=true&requireSSL=true&verifyServerCertificate=true&enabledTLSProtocols=TLSv1.2&trustCertificateKeyStorePassword=123456&trustCertificateKeyStoreUrl=file:$scheduler_db_trust_store&trustCertificateKeyStoreType=pkcs12"
    DBURI=$DBURI"&sslrootcert=/var/vcap/jobs/scheduler/config/certs/scheduler_db/ca.crt"
  <% end %>
<% end %>

<% if p('autoscaler.policy_db.db_scheme') == "postgres" %>
  <% unless p("autoscaler.scheduler_db.tls.private_key") == "" %>
    convert_to_pk8  /var/vcap/jobs/scheduler/config/certs/policy_db/key /var/vcap/jobs/scheduler/config/certs/policy_db/key.pk8
  <% end %>
<% end %>

detect_dns $HOST $PORT
/var/vcap/packages/changeloglockcleaner/changeloglockcleaner -d "$DBURI" -e <%= p("autoscaler.changeloglock_timeout_seconds") %>

<% if p('autoscaler.scheduler_db.db_scheme') == "postgres" %>
  retry java -cp "$DB_DIR/target/lib/*:$SCHEDULER_DIR/db" liquibase.integration.commandline.Main --url "$JDBCDBURL" --username=$USER --password=$PASSWORD \
  --driver=org.postgresql.Driver --changeLogFile=scheduler.changelog-master.yaml update

  retry java -cp "$DB_DIR/target/lib/*:$SCHEDULER_DIR/db" liquibase.integration.commandline.Main --url "$JDBCDBURL" --username=$USER --password=$PASSWORD \
  --driver=org.postgresql.Driver --changeLogFile=quartz.changelog-master.yaml update
<% else %>
  retry java -cp "/var/vcap/packages/db/target/lib/*:/var/vcap/packages/common" -Dliquibase.headless=true liquibase.integration.commandline.Main --url "$JDBCDBURL" --username=$USER --password=$PASSWORD \
  --driver=com.mysql.cj.jdbc.Driver --changeLogFile=databasechangelog-primarykey.yml update
  retry java -cp "$DB_DIR/target/lib/*:$SCHEDULER_DIR/db" liquibase.integration.commandline.Main --url "$JDBCDBURL" --username=$USER --password=$PASSWORD \
  --driver=com.mysql.cj.jdbc.Driver --changeLogFile=scheduler.changelog-master.yaml update

  retry java -cp "$DB_DIR/target/lib/*:$SCHEDULER_DIR/db" -Dliquibase.headless=true liquibase.integration.commandline.Main --url "$JDBCDBURL" --username=$USER --password=$PASSWORD \
  --driver=com.mysql.cj.jdbc.Driver --changeLogFile=quartz.changelog-master.yaml update
<% end %>

# Generate key store for the clients communicate with scheduler.
/var/vcap/jobs/scheduler/bin/install_crt_keystore scheduler server.crt server.key /var/vcap/jobs/scheduler/config/certs/server.p12
/var/vcap/jobs/scheduler/bin/install_crt_keystore scalingengine scalingengine/client.crt scalingengine/client.key /var/vcap/jobs/scheduler/config/certs/scalingengine/client.p12

# Generate trust stores.
/var/vcap/jobs/scheduler/bin/install_crt_truststore scheduler ca.crt "/var/vcap/jobs/scheduler/config/certs/cacerts"
/var/vcap/jobs/scheduler/bin/install_crt_truststore scalingengine scalingengine/ca.crt "/var/vcap/jobs/scheduler/config/certs/scalingengine/cacerts"
