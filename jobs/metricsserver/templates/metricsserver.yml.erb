<%
  def p_arr(property)
    p(property,nil) || []
  end

  def build_db_url(db_name, job_name)
    db_scheme = p("autoscaler.#{db_name}.db_scheme")
    db_address = p("autoscaler.#{db_name}.address")
    db_port = p("autoscaler.#{db_name}.port")
    db_roles = p_arr("autoscaler.#{db_name}.roles")
    db_dbs = p_arr("autoscaler.#{db_name}.databases")
    db_role = db_roles.find { |role| role['tag'] == db_name.tr('_', '') } ||  db_roles.find { |role| role['tag'] == 'default' }
    db_database = db_dbs.find { |database| database['tag'] == db_name.tr('_', '') } || db_dbs.find { |database| database['tag'] == 'default' }

    if db_scheme == "postgres"
      db_url = "#{db_scheme}://#{ERB::Util.url_encode(db_role['name'])}:#{ERB::Util.url_encode(db_role['password'])}@#{db_address}:#{db_port}/#{db_database['name']}?application_name=#{job_name}&sslmode=" + p("autoscaler.#{db_name}.sslmode")
    else
      db_url = "#{db_role['name']}:#{db_role['password']}@tcp(#{db_address}:#{db_port})/#{db_database['name']}?tls=" + p("autoscaler.#{db_name}.sslmode")
    end
    append_db_tls_configs(db_name, db_url, job_name)
  end

  def append_db_tls_configs(db_name, db_url, job_name)
  unless p("autoscaler.#{db_name}.tls.ca") == ""
    db_url = "#{db_url}&sslrootcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/ca.crt"
  end
  unless p("autoscaler.#{db_name}.tls.certificate") == ""
    db_url = "#{db_url}&sslcert=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/crt"
  end
  unless p("autoscaler.#{db_name}.tls.private_key") == ""
    db_url = "#{db_url}&sslkey=/var/vcap/jobs/#{job_name}/config/certs/#{db_name}/key"
  end
  db_url
end
  job_name = 'metricsserver'
  instance_metrics_db_url = build_db_url('instancemetrics_db', job_name)
  policy_db_url = build_db_url('policy_db', job_name)

  sorted_instances=link("metricsserver").instances.sort_by {|i|i.address}
  nodeIndex=sorted_instances.index(sorted_instances.find{|i|i.id == spec.id})
  addrs=sorted_instances.map{|i| "'#{i.address}'"}
  nodeAddrs="[" + addrs.join(",") +"]"
%>
###########################################
#           Template Main                 #
###########################################
logging:
  level: <%= p("autoscaler.metricsserver.logging.level") %>
http_client_timeout: <%= p("autoscaler.metricsserver.http_client_timeout") %>
node_addrs: <%= nodeAddrs %>
node_index: <%= nodeIndex %>
db:
  policy_db:
    url: <%= policy_db_url %>
    max_open_connections: <%= p("autoscaler.policy_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.policy_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.policy_db_connection_config.connection_max_lifetime") %>
  instance_metrics_db:
    url: <%= instance_metrics_db_url %>
    max_open_connections: <%= p("autoscaler.instancemetrics_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.instancemetrics_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.instancemetrics_db_connection_config.connection_max_lifetime") %>
collector:
  port: <%= p("autoscaler.metricsserver.collector.port") %>
  keep_alive_time: <%= p("autoscaler.metricsserver.collector.keep_alive_time") %>
  refresh_interval: <%= p("autoscaler.metricsserver.collector.refresh_interval") %>
  collect_interval: <%= p("autoscaler.metricsserver.collector.collect_interval") %>
  save_interval: <%= p("autoscaler.metricsserver.collector.save_interval") %>
  persist_metrics: <%= p("autoscaler.metricsserver.collector.persist_metrics") %>
  envelope_processor_count: <%= p("autoscaler.metricsserver.collector.envelope_processor_count") %>
  metric_cache_size_per_app: <%= p("autoscaler.metricsserver.collector.metric_cache_size_per_app") %>
  envelope_channel_size: <%= p("autoscaler.metricsserver.collector.envelope_channel_size") %>
  metric_channel_size: <%= p("autoscaler.metricsserver.collector.metric_channel_size") %>
  tls:
    key_file: /var/vcap/jobs/metricsserver/config/certs/metricsserver/server.key
    cert_file: /var/vcap/jobs/metricsserver/config/certs/metricsserver/server.crt
    ca_file: /var/vcap/jobs/metricsserver/config/certs/metricsserver/ca.crt

server:
  port:  <%= p("autoscaler.metricsserver.server.port") %>
  tls:
    key_file: /var/vcap/jobs/metricsserver/config/certs/metricsserver/server.key
    cert_file: /var/vcap/jobs/metricsserver/config/certs/metricsserver/server.crt
    ca_file: /var/vcap/jobs/metricsserver/config/certs/metricsserver/ca.crt
health:
  port: <%= p("autoscaler.metricsserver.health.port") %>
  username: <%= p("autoscaler.metricsserver.health.username") %>
  password: <%= p("autoscaler.metricsserver.health.password") %>
  unprotected_endpoints: <%= p("autoscaler.metricsserver.health.unprotected_endpoints") %>
  readiness_enabled: <%= p("autoscaler.metricsserver.health.readiness_enabled") %>




