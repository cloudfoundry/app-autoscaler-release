#!/bin/bash 

<%
  def p_arr(property)
    p(property,nil) || []
  end

  role = p_arr('autoscaler.scalingengine_db.roles').find { |role| role['tag'] == 'scalingenginedb' or role['tag'] == 'default' }
  database = p_arr('autoscaler.scalingengine_db.databases').find { |database| database['tag'] == 'scalingenginedb' or database['tag'] == 'default' }
%>
source /var/vcap/packages/common/dns-helper.sh
source /var/vcap/packages/common/retry-helper.sh
source /var/vcap/packages/common/cert-helper.sh

export PATH=/var/vcap/packages/openjdk-17/bin:$PATH

HOST='<%= p("autoscaler.scalingengine_db.address") %>'
DBNAME='<%= database['name'] %>'
USER='<%= role['name'] %>'
PASSWORD='<%= role['password'] %>'
PORT='<%= p("autoscaler.scalingengine_db.port") %>'
SSLMODE='<%= p("autoscaler.scalingengine_db.sslmode") %>'

<% if p('autoscaler.scalingengine_db.db_scheme') =="postgres" %>
 	JDBCDBURL="jdbc:postgresql://$HOST:$PORT/$DBNAME?sslmode=$SSLMODE"
 	DBURI="postgres://$USER:$PASSWORD@$HOST:$PORT/$DBNAME?sslmode=$SSLMODE"
	<% unless p('autoscaler.scalingengine_db.tls.ca') == "" %>
 		JDBCDBURL=$JDBCDBURL"&sslrootcert=/var/vcap/jobs/scalingengine/config/certs/scalingengine_db/ca.crt"
 		DBURI=$DBURI"&sslrootcert=/var/vcap/jobs/scalingengine/config/certs/scalingengine_db/ca.crt"
 	<% end %>
	<% unless p("autoscaler.scalingengine_db.tls.certificate") == "" %>
		JDBCDBURL=$JDBCDBURL"&sslcert=/var/vcap/jobs/scalingengine/config/certs/scalingengine_db/crt"
		DBURI=$DBURI"&sslcert=/var/vcap/jobs/scalingengine/config/certs/scalingengine_db/crt"
	<% end %>
	<% unless p("autoscaler.scalingengine_db.tls.private_key") == "" %>
		declare -r rsa_key_file=/var/vcap/jobs/scalingengine/config/certs/scalingengine_db/key
		declare -r pk8_file=/var/vcap/jobs/scalingengine/config/certs/scalingengine_db/key.pk8
		convert_to_pk8 "$rsa_key_file" "$pk8_file"
		JDBCDBURL=$JDBCDBURL"&sslkey=$pk8_file"
		DBURI=$DBURI"&sslkey=$rsa_key_file"
	<% end %>
<% else %>
	JDBCDBURL="jdbc:mysql://$HOST:$PORT/$DBNAME?autoReconnect=true"
	DBURI="$USER:$PASSWORD@tcp($HOST:$PORT)/$DBNAME?tls=$SSLMODE"
	<%unless p('autoscaler.scalingengine_db.tls.ca') == "" %>
		declare -r scalingengine_db_trust_store=/var/vcap/jobs/scalingengine/config/certs/scalingengine_db/cacerts
		/var/vcap/packages/common/init-db-truststore.sh scalingengine_db /var/vcap/jobs/scalingengine/config/certs/scalingengine_db/ca.crt "$scalingengine_db_trust_store"
		JDBCDBURL=$JDBCDBURL"&useSSL=true&requireSSL=true&verifyServerCertificate=true&enabledTLSProtocols=TLSv1.2&trustCertificateKeyStorePassword=123456&trustCertificateKeyStoreUrl=file:$scalingengine_db_trust_store&trustCertificateKeyStoreType=pkcs12"
		DBURI=$DBURI"&sslrootcert=/var/vcap/jobs/scalingengine/config/certs/scalingengine_db/ca.crt"
 	<% end %>
<% end %>

detect_dns $HOST $PORT
/var/vcap/packages/changeloglockcleaner/changeloglockcleaner -d "$DBURI" -e <%= p("autoscaler.changeloglock_timeout_seconds") %>

<% if p('autoscaler.scalingengine_db.db_scheme') == "postgres" %>
	retry java -cp "/var/vcap/packages/db/target/lib/*:/var/vcap/packages/scalingengine" liquibase.integration.commandline.Main --url "$JDBCDBURL" --username=$USER --password=$PASSWORD \
	--driver=org.postgresql.Driver --changeLogFile=scalingengine.db.changelog.yml update
<% else %>
	retry java -cp "/var/vcap/packages/db/target/lib/*:/var/vcap/packages/common" liquibase.integration.commandline.Main --url "$JDBCDBURL" --username=$USER --password=$PASSWORD \
	--driver=com.mysql.cj.jdbc.Driver --changeLogFile=databasechangelog-primarykey.yml update
	retry java -cp "/var/vcap/packages/db/target/lib/*:/var/vcap/packages/scalingengine" liquibase.integration.commandline.Main --url "$JDBCDBURL" --username=$USER --password=$PASSWORD \
	--driver=com.mysql.cj.jdbc.Driver --changeLogFile=scalingengine.db.changelog.yml update
<% end %>
