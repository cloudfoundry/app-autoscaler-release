name: "renovate-/ospo-bot: go mod tidy"
on:
  # pull_request:
  #   paths:
  #     - ".github/workflows/dependency-update-go-mod-tidy.yaml"
  push:
    # Execute on all renovate-branches, iff go.mod/-sum of the helper app has been changed.
    branches:
      - "renovate/**"
      - "dependabot/**"
    paths:
      - ".github/workflows/dependency-update-go-mod-tidy.yaml"
      - "./src/**/go.mod"
      - "./src/**/go.sum"
jobs:
  go-mod-tidy:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
#    if: contains(fromJson('["dependabot[bot]", "renovate[bot]"]'), github.event.pull_request.user.login) && contains(github.event.pull_request.labels.*.name, 'dependencies')
    steps:
      # We potentially want to add at the end a commit by the author of the most recent
      # commit in this branch. However github has some protection which prevents workflows
      # to run in case a commit has been pushed with the default job-specific github-token.
      # For this case we need to use another one here.
      #
      # For more information, see:
      # <https://docs.github.com/en/actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow>
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
          token: ${{ secrets.APP_AUTOSCALER_CI_TOKEN }} # With push token that can trigger new PR jobs
      - name: Configure git
        shell: bash
        run: |
          #! /usr/bin/env bash
          set -eu -o pipefail

          git config --global --add safe.directory "${GITHUB_WORKSPACE}"
          git config user.name "GitHubActions"
          git config user.email "<>"
      - name: go-mod-tidy
        shell: bash
        run: |
          #! /usr/bin/env bash
          set -eu -o pipefail

          declare -r commit_author_name="${{github.event.head_commit.author.name}}"
          if [[ ! "${commit_author_name}" =~ ('dependabot'|'renovate')'[bot]' ]]
          then
            echo 'This commit was not by a known bot! Exiting â€¦'
            echo "Debug: commit_author_name = ${commit_author_name}"
            exit 0
          fi

          declare -r current_branch="$(git rev-parse --abbrev-ref 'HEAD')"
          git checkout 'HEAD~1'
          pushd './src/acceptance/assets/app/go_app'
            make generate
            git checkout "${current_branch}"
            go mod tidy
          popd

          declare -i -r changed_files=$(git status --porcelain | wc --lines)
          if ((changed_files >= 0))
          then
            git add .
            git commit --amend --no-edit
            git push --force-with-lease
          fi

      # - uses: fastify/github-action-merge-dependabot@v3
      #   name: Auto-approve
      #   if: github.event.pull_request.user.login == 'dependabot[bot]'
      #   with:
      #     github-token: "${{ secrets.GITHUB_TOKEN }}"
      #     target: minor
      #     approve-only: true
      # - uses: alexwilson/enable-github-automerge-action@1.0.0
      #   name: Enable Auto-merge
      #   with:
      #     github-token: "${{ secrets.APP_AUTOSCALER_CI_TOKEN }}"
      #     merge-method: "SQUASH"



# name: Renovate Postprocessing
# concurrency:
#   group: '${{ github.workflow }}-${{ github.head_ref || github.run_id }}'
#   cancel-in-progress: true
# on:
#   pull_request:
#     paths:
#       - '.github/workflows/product_renovate_postprocessing.yaml'
#   push:
#     branches: # But just on PRs with renovate branches
#       - 'renovate/**'
#   workflow_dispatch:

# jobs:
#   postprocessing:
#     name: Postprocessing
#     runs-on: [ solinas-medium ]
#     container:
#       image: public.int.repositories.cloud.sap/python:3.10
#     # Renovate bot has a different name. We just want to run if the last commit is from renovate and not from us.
#     # This is to prevent endless loops where our commit at the bottom will trigger this workflow again.
#     # Normally this is not an issue since the default job specific GITHUB_TOKEN is used. In that case GitHub has
#     # protection in place to not run any action when this token is used. Since we want to start other validation jobs
#     # with this commit we use a technical users token to trigger other actions but skip rerunning ours to not end up in an endless loop.
#     if: github.actor == 'ospo-renovate[bot]'
#     defaults:
#       run:
#         shell: bash
#     steps:
#       - uses: hmarr/debug-action@v2
#       - name: Checkout Product Base Ref
#         uses: actions/checkout@v3
#         with:
#           ref: ${{ github.base_ref || 'master' }}
#           fetch-depth: 0
#           submodules: true
#           token: ${{ secrets.GH_TOKEN }} # With push token that can trigger new PR jobs
#       - name: Checkout Product Head Ref
#         uses: actions/checkout@v3
#         with:
#           submodules: true
#           token: ${{ secrets.GH_TOKEN }} # With push token that can trigger new PR jobs

#       - name: Python Postprocessing
#         run: |
#           set -euxo pipefail
#           git config --global --add safe.directory '*'
#           # If we dont have a base branch, we assume we want to merge to master
#           [[ -z "$GITHUB_BASE_REF" ]] && GITHUB_BASE_REF=master

#           # If only comments change in a file, remove it from the commit
#           discard_if_only_comments(){
#               # We exclude comments in this diff.
#               if diff -U 0 -w -B -I '^[:space: :tab:]*#' $2 $1; then
#                 echo "Discarding $1"
#                 git restore $1
#               fi
#           }

#           # Install the version of pip-compile in dev-requirements.txt
#           cat dev-requirements.txt | grep -m1 -o '^pip-tools[^\\#]*' | xargs -n 1 pip install
#           python --version
#           pip --version
#           pip-compile --version

#           # Global Requirements
#           global_packages(){
#             tempdir="$(mktemp -d)"
#             cp requirements.txt $tempdir/
#             cp dev-requirements.txt $tempdir/
#             pip-compile requirements.in --resolver=backtracking
#             pip-compile dev-requirements.in --resolver=backtracking
#             discard_if_only_comments requirements.txt $tempdir/requirements.txt
#             discard_if_only_comments dev-requirements.txt $tempdir/dev-requirements.txt
#           }

#           # Controlplane cf-push-monitoring
#           controlplane_monitoring_app(){
#             #Only pip-compile if dev-requirements.in changed
#             pushd components/cf/resources/cf-push-monitoring/
#               if ! git diff --name-only --exit-code "origin/$GITHUB_BASE_REF" -- src/requirements.in src/requirements.txt dev-requirements.in dev-requirements.txt; then
#                 tempdir="$(mktemp -d)"
#                 cp dev-requirements.txt $tempdir/
#                 pip-compile dev-requirements.in
#                 discard_if_only_comments dev-requirements.txt $tempdir/dev-requirements.txt
#                 pushd src/
#                   cp requirements.txt $tempdir/
#                   pip-compile requirements.in
#                   discard_if_only_comments requirements.txt $tempdir/requirements.txt

#                   #Only run vendoring if requirements.txt changed
#                   if ! git diff --name-only --exit-code "origin/$GITHUB_BASE_REF" -- requirements.txt; then
#                       rm -rf vendor/*
#                       pip download -r requirements.txt --no-cache --no-binary=:none: -d vendor
#                   fi
#                 popd
#               fi
#             popd
#           }

#           # Controlplane control-plane-test-app
#           controlplane_test_app(){
#             #Only pip-compile if dev-requirements.in changed
#             pushd components/cf/resources/control-plane-test-app/
#               #Only pip-compile if requirements files changed
#               if ! git diff --name-only --exit-code "origin/$GITHUB_BASE_REF" -- requirements.in requirements.txt dev-requirements.in dev-requirements.txt; then
#                   tempdir="$(mktemp -d)"
#                   cp requirements.txt $tempdir/
#                   pip-compile requirements.in
#                   discard_if_only_comments requirements.txt $tempdir/requirements.txt
#                   cp dev-requirements.txt $tempdir/
#                   pip-compile dev-requirements.in
#                   discard_if_only_comments dev-requirements.txt $tempdir/dev-requirements.txt
#               fi
#               #Only run vendoring if requirements.txt changed
#               if ! git diff --name-only --exit-code "origin/$GITHUB_BASE_REF" -- requirements.txt; then
#                   rm -rf vendor/*
#                   pip download -r requirements.txt --no-cache --no-binary=:none: -d vendor
#               fi
#             popd
#           }

#           # Run Postprocessing in Parallel
#           global_packages
#           controlplane_test_app
#           controlplane_monitoring_app

#           # Add Changes
#           git add . && git status
#       - uses: EndBug/add-and-commit@v9
#         name: Commit Changes
#         if: github.event_name != 'pull_request'
#         with:
#           message: Postprocessing - ${{github.event.head_commit.message}}
#           # We need to make a commit to trigger PR Validations since they wont run on renovate Commits directly
#           # Such actions add this if in their job: `if: github.actor != 'ospo-renovate[bot]'`
#           # So if renovate opens/rebases a PR it will execute the tests once and not twice. Following flow is desired:
#           # 1. Renovate makes PR. --> 2. No Test validation run, just the postprocessing action
#           # 3. The postprocessing action commits their changes --> 4. PR validations run now
#           # So we add an empty commit if needed to have a commit made to the PR branch and thus trigger the validations
#           commit: --allow-empty
#           author_name: github-actions
#           author_email: DL_605C461DF2B94B027E394EE7@global.corp.sap@users.noreply.github.com
#           push: true
