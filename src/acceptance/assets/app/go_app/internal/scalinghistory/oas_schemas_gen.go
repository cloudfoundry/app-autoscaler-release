// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/url"

	"github.com/go-faster/errors"
)

func (s *ErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct{}

// ErrorResponseStatusCode wraps ErrorResponse with StatusCode.
type ErrorResponseStatusCode struct {
	StatusCode int
	Response   ErrorResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorResponseStatusCode) GetResponse() ErrorResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorResponseStatusCode) SetResponse(val ErrorResponse) {
	s.Response = val
}

// Object containing scaling history.
// Ref: #/components/schemas/History
type History struct {
	// Number of history entries found for the given query.
	TotalResults OptInt64 `json:"total_results"`
	// Number of Pages from the query.
	TotalPages OptInt64 `json:"total_pages"`
	// Number of the current page.
	Page      OptInt64       `json:"page"`
	PrevURL   OptURI         `json:"prev_url"`
	NextURL   OptURI         `json:"next_url"`
	Resources []HistoryEntry `json:"resources"`
}

// GetTotalResults returns the value of TotalResults.
func (s *History) GetTotalResults() OptInt64 {
	return s.TotalResults
}

// GetTotalPages returns the value of TotalPages.
func (s *History) GetTotalPages() OptInt64 {
	return s.TotalPages
}

// GetPage returns the value of Page.
func (s *History) GetPage() OptInt64 {
	return s.Page
}

// GetPrevURL returns the value of PrevURL.
func (s *History) GetPrevURL() OptURI {
	return s.PrevURL
}

// GetNextURL returns the value of NextURL.
func (s *History) GetNextURL() OptURI {
	return s.NextURL
}

// GetResources returns the value of Resources.
func (s *History) GetResources() []HistoryEntry {
	return s.Resources
}

// SetTotalResults sets the value of TotalResults.
func (s *History) SetTotalResults(val OptInt64) {
	s.TotalResults = val
}

// SetTotalPages sets the value of TotalPages.
func (s *History) SetTotalPages(val OptInt64) {
	s.TotalPages = val
}

// SetPage sets the value of Page.
func (s *History) SetPage(val OptInt64) {
	s.Page = val
}

// SetPrevURL sets the value of PrevURL.
func (s *History) SetPrevURL(val OptURI) {
	s.PrevURL = val
}

// SetNextURL sets the value of NextURL.
func (s *History) SetNextURL(val OptURI) {
	s.NextURL = val
}

// SetResources sets the value of Resources.
func (s *History) SetResources(val []HistoryEntry) {
	s.Resources = val
}

// Merged schema.
// Ref: #/components/schemas/HistoryEntry
type HistoryEntry struct {
	// Following stati are possible:
	// + 0: The scaling was done successfully.
	// + 1: The scaling failed explicitly.
	// + 2: The scaling was ignored.
	// This field is as well a selector of which of the other ones are used and which not.
	Status OptHistoryEntryStatus `json:"status"`
	// The GUID identifying the application for which the scaling history is fetched.
	// It can be found in the `application_id` property of the JSON object stored in the
	// `VCAP_APPLICATION` environment variable.
	AppGUID OptString `json:"app_guid"`
	// The scaling time in the number of nanoseconds elapsed since January 1, 1970 UTC.
	Timestamp OptInt `json:"timestamp"`
	// There are two different scaling types:
	// + 0: This represents `ScalingTypeDynamic`. The scaling has been done due to a dynamic
	// scaling rule, reacting on metrics provided by the app.
	// + 1: This represents `ScalingTypeSchedule`. The scaling has been done due to a
	// scheduled period changing the default instance limits.
	ScalingType OptHistoryEntryScalingType `json:"scaling_type"`
	// The number of instances before the scaling.
	OldInstances OptInt64 `json:"old_instances"`
	// The number of instances after the scaling.
	NewInstances OptInt64 `json:"new_instances"`
	// Textual information about what triggered the scaling event.
	Reason OptString `json:"reason"`
}

// GetStatus returns the value of Status.
func (s *HistoryEntry) GetStatus() OptHistoryEntryStatus {
	return s.Status
}

// GetAppGUID returns the value of AppGUID.
func (s *HistoryEntry) GetAppGUID() OptString {
	return s.AppGUID
}

// GetTimestamp returns the value of Timestamp.
func (s *HistoryEntry) GetTimestamp() OptInt {
	return s.Timestamp
}

// GetScalingType returns the value of ScalingType.
func (s *HistoryEntry) GetScalingType() OptHistoryEntryScalingType {
	return s.ScalingType
}

// GetOldInstances returns the value of OldInstances.
func (s *HistoryEntry) GetOldInstances() OptInt64 {
	return s.OldInstances
}

// GetNewInstances returns the value of NewInstances.
func (s *HistoryEntry) GetNewInstances() OptInt64 {
	return s.NewInstances
}

// GetReason returns the value of Reason.
func (s *HistoryEntry) GetReason() OptString {
	return s.Reason
}

// SetStatus sets the value of Status.
func (s *HistoryEntry) SetStatus(val OptHistoryEntryStatus) {
	s.Status = val
}

// SetAppGUID sets the value of AppGUID.
func (s *HistoryEntry) SetAppGUID(val OptString) {
	s.AppGUID = val
}

// SetTimestamp sets the value of Timestamp.
func (s *HistoryEntry) SetTimestamp(val OptInt) {
	s.Timestamp = val
}

// SetScalingType sets the value of ScalingType.
func (s *HistoryEntry) SetScalingType(val OptHistoryEntryScalingType) {
	s.ScalingType = val
}

// SetOldInstances sets the value of OldInstances.
func (s *HistoryEntry) SetOldInstances(val OptInt64) {
	s.OldInstances = val
}

// SetNewInstances sets the value of NewInstances.
func (s *HistoryEntry) SetNewInstances(val OptInt64) {
	s.NewInstances = val
}

// SetReason sets the value of Reason.
func (s *HistoryEntry) SetReason(val OptString) {
	s.Reason = val
}

// There are two different scaling types:
// + 0: This represents `ScalingTypeDynamic`. The scaling has been done due to a dynamic
// scaling rule, reacting on metrics provided by the app.
// + 1: This represents `ScalingTypeSchedule`. The scaling has been done due to a
// scheduled period changing the default instance limits.
type HistoryEntryScalingType int64

const (
	HistoryEntryScalingType0 HistoryEntryScalingType = 0
	HistoryEntryScalingType1 HistoryEntryScalingType = 1
)

// Following stati are possible:
// + 0: The scaling was done successfully.
// + 1: The scaling failed explicitly.
// + 2: The scaling was ignored.
// This field is as well a selector of which of the other ones are used and which not.
type HistoryEntryStatus int64

const (
	HistoryEntryStatus0 HistoryEntryStatus = 0
	HistoryEntryStatus1 HistoryEntryStatus = 1
	HistoryEntryStatus2 HistoryEntryStatus = 2
)

// NewOptHistoryEntryScalingType returns new OptHistoryEntryScalingType with value set to v.
func NewOptHistoryEntryScalingType(v HistoryEntryScalingType) OptHistoryEntryScalingType {
	return OptHistoryEntryScalingType{
		Value: v,
		Set:   true,
	}
}

// OptHistoryEntryScalingType is optional HistoryEntryScalingType.
type OptHistoryEntryScalingType struct {
	Value HistoryEntryScalingType
	Set   bool
}

// IsSet returns true if OptHistoryEntryScalingType was set.
func (o OptHistoryEntryScalingType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHistoryEntryScalingType) Reset() {
	var v HistoryEntryScalingType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHistoryEntryScalingType) SetTo(v HistoryEntryScalingType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHistoryEntryScalingType) Get() (v HistoryEntryScalingType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHistoryEntryScalingType) Or(d HistoryEntryScalingType) HistoryEntryScalingType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHistoryEntryStatus returns new OptHistoryEntryStatus with value set to v.
func NewOptHistoryEntryStatus(v HistoryEntryStatus) OptHistoryEntryStatus {
	return OptHistoryEntryStatus{
		Value: v,
		Set:   true,
	}
}

// OptHistoryEntryStatus is optional HistoryEntryStatus.
type OptHistoryEntryStatus struct {
	Value HistoryEntryStatus
	Set   bool
}

// IsSet returns true if OptHistoryEntryStatus was set.
func (o OptHistoryEntryStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHistoryEntryStatus) Reset() {
	var v HistoryEntryStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHistoryEntryStatus) SetTo(v HistoryEntryStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHistoryEntryStatus) Get() (v HistoryEntryStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHistoryEntryStatus) Or(d HistoryEntryStatus) HistoryEntryStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1AppsGUIDScalingHistoriesGetOrderDirection returns new OptV1AppsGUIDScalingHistoriesGetOrderDirection with value set to v.
func NewOptV1AppsGUIDScalingHistoriesGetOrderDirection(v V1AppsGUIDScalingHistoriesGetOrderDirection) OptV1AppsGUIDScalingHistoriesGetOrderDirection {
	return OptV1AppsGUIDScalingHistoriesGetOrderDirection{
		Value: v,
		Set:   true,
	}
}

// OptV1AppsGUIDScalingHistoriesGetOrderDirection is optional V1AppsGUIDScalingHistoriesGetOrderDirection.
type OptV1AppsGUIDScalingHistoriesGetOrderDirection struct {
	Value V1AppsGUIDScalingHistoriesGetOrderDirection
	Set   bool
}

// IsSet returns true if OptV1AppsGUIDScalingHistoriesGetOrderDirection was set.
func (o OptV1AppsGUIDScalingHistoriesGetOrderDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1AppsGUIDScalingHistoriesGetOrderDirection) Reset() {
	var v V1AppsGUIDScalingHistoriesGetOrderDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1AppsGUIDScalingHistoriesGetOrderDirection) SetTo(v V1AppsGUIDScalingHistoriesGetOrderDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1AppsGUIDScalingHistoriesGetOrderDirection) Get() (v V1AppsGUIDScalingHistoriesGetOrderDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1AppsGUIDScalingHistoriesGetOrderDirection) Or(d V1AppsGUIDScalingHistoriesGetOrderDirection) V1AppsGUIDScalingHistoriesGetOrderDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type V1AppsGUIDScalingHistoriesGetOrderDirection string

const (
	V1AppsGUIDScalingHistoriesGetOrderDirectionAsc  V1AppsGUIDScalingHistoriesGetOrderDirection = "asc"
	V1AppsGUIDScalingHistoriesGetOrderDirectionDesc V1AppsGUIDScalingHistoriesGetOrderDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s V1AppsGUIDScalingHistoriesGetOrderDirection) MarshalText() ([]byte, error) {
	switch s {
	case V1AppsGUIDScalingHistoriesGetOrderDirectionAsc:
		return []byte(s), nil
	case V1AppsGUIDScalingHistoriesGetOrderDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1AppsGUIDScalingHistoriesGetOrderDirection) UnmarshalText(data []byte) error {
	switch V1AppsGUIDScalingHistoriesGetOrderDirection(data) {
	case V1AppsGUIDScalingHistoriesGetOrderDirectionAsc:
		*s = V1AppsGUIDScalingHistoriesGetOrderDirectionAsc
		return nil
	case V1AppsGUIDScalingHistoriesGetOrderDirectionDesc:
		*s = V1AppsGUIDScalingHistoriesGetOrderDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
