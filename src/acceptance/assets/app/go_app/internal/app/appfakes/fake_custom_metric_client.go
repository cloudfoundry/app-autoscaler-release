// Code generated by counterfeiter. DO NOT EDIT.
package appfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/app-autoscaler-release/src/acceptance/assets/app/go_app/internal/app"
	cfenv "github.com/cloudfoundry-community/go-cfenv"
)

type FakeCustomMetricClient struct {
	PostCustomMetricStub        func(context.Context, *cfenv.App, float64, string, bool) error
	postCustomMetricMutex       sync.RWMutex
	postCustomMetricArgsForCall []struct {
		arg1 context.Context
		arg2 *cfenv.App
		arg3 float64
		arg4 string
		arg5 bool
	}
	postCustomMetricReturns struct {
		result1 error
	}
	postCustomMetricReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCustomMetricClient) PostCustomMetric(arg1 context.Context, arg2 *cfenv.App, arg3 float64, arg4 string, arg5 bool) error {
	fake.postCustomMetricMutex.Lock()
	ret, specificReturn := fake.postCustomMetricReturnsOnCall[len(fake.postCustomMetricArgsForCall)]
	fake.postCustomMetricArgsForCall = append(fake.postCustomMetricArgsForCall, struct {
		arg1 context.Context
		arg2 *cfenv.App
		arg3 float64
		arg4 string
		arg5 bool
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.PostCustomMetricStub
	fakeReturns := fake.postCustomMetricReturns
	fake.recordInvocation("PostCustomMetric", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.postCustomMetricMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCustomMetricClient) PostCustomMetricCallCount() int {
	fake.postCustomMetricMutex.RLock()
	defer fake.postCustomMetricMutex.RUnlock()
	return len(fake.postCustomMetricArgsForCall)
}

func (fake *FakeCustomMetricClient) PostCustomMetricCalls(stub func(context.Context, *cfenv.App, float64, string, bool) error) {
	fake.postCustomMetricMutex.Lock()
	defer fake.postCustomMetricMutex.Unlock()
	fake.PostCustomMetricStub = stub
}

func (fake *FakeCustomMetricClient) PostCustomMetricArgsForCall(i int) (context.Context, *cfenv.App, float64, string, bool) {
	fake.postCustomMetricMutex.RLock()
	defer fake.postCustomMetricMutex.RUnlock()
	argsForCall := fake.postCustomMetricArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCustomMetricClient) PostCustomMetricReturns(result1 error) {
	fake.postCustomMetricMutex.Lock()
	defer fake.postCustomMetricMutex.Unlock()
	fake.PostCustomMetricStub = nil
	fake.postCustomMetricReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCustomMetricClient) PostCustomMetricReturnsOnCall(i int, result1 error) {
	fake.postCustomMetricMutex.Lock()
	defer fake.postCustomMetricMutex.Unlock()
	fake.PostCustomMetricStub = nil
	if fake.postCustomMetricReturnsOnCall == nil {
		fake.postCustomMetricReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.postCustomMetricReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCustomMetricClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.postCustomMetricMutex.RLock()
	defer fake.postCustomMetricMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCustomMetricClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ app.CustomMetricClient = new(FakeCustomMetricClient)
