// Code generated by counterfeiter. DO NOT EDIT.
package appfakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/app-autoscaler-release/src/acceptance/assets/app/go_app/internal/app"
)

type FakeMemoryGobbler struct {
	IsRunningStub        func() bool
	isRunningMutex       sync.RWMutex
	isRunningArgsForCall []struct {
	}
	isRunningReturns struct {
		result1 bool
	}
	isRunningReturnsOnCall map[int]struct {
		result1 bool
	}
	SleepStub        func(time.Duration)
	sleepMutex       sync.RWMutex
	sleepArgsForCall []struct {
		arg1 time.Duration
	}
	StopTestStub        func()
	stopTestMutex       sync.RWMutex
	stopTestArgsForCall []struct {
	}
	UseMemoryStub        func(uint64)
	useMemoryMutex       sync.RWMutex
	useMemoryArgsForCall []struct {
		arg1 uint64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMemoryGobbler) IsRunning() bool {
	fake.isRunningMutex.Lock()
	ret, specificReturn := fake.isRunningReturnsOnCall[len(fake.isRunningArgsForCall)]
	fake.isRunningArgsForCall = append(fake.isRunningArgsForCall, struct {
	}{})
	stub := fake.IsRunningStub
	fakeReturns := fake.isRunningReturns
	fake.recordInvocation("IsRunning", []interface{}{})
	fake.isRunningMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMemoryGobbler) IsRunningCallCount() int {
	fake.isRunningMutex.RLock()
	defer fake.isRunningMutex.RUnlock()
	return len(fake.isRunningArgsForCall)
}

func (fake *FakeMemoryGobbler) IsRunningCalls(stub func() bool) {
	fake.isRunningMutex.Lock()
	defer fake.isRunningMutex.Unlock()
	fake.IsRunningStub = stub
}

func (fake *FakeMemoryGobbler) IsRunningReturns(result1 bool) {
	fake.isRunningMutex.Lock()
	defer fake.isRunningMutex.Unlock()
	fake.IsRunningStub = nil
	fake.isRunningReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMemoryGobbler) IsRunningReturnsOnCall(i int, result1 bool) {
	fake.isRunningMutex.Lock()
	defer fake.isRunningMutex.Unlock()
	fake.IsRunningStub = nil
	if fake.isRunningReturnsOnCall == nil {
		fake.isRunningReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isRunningReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMemoryGobbler) Sleep(arg1 time.Duration) {
	fake.sleepMutex.Lock()
	fake.sleepArgsForCall = append(fake.sleepArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	stub := fake.SleepStub
	fake.recordInvocation("Sleep", []interface{}{arg1})
	fake.sleepMutex.Unlock()
	if stub != nil {
		fake.SleepStub(arg1)
	}
}

func (fake *FakeMemoryGobbler) SleepCallCount() int {
	fake.sleepMutex.RLock()
	defer fake.sleepMutex.RUnlock()
	return len(fake.sleepArgsForCall)
}

func (fake *FakeMemoryGobbler) SleepCalls(stub func(time.Duration)) {
	fake.sleepMutex.Lock()
	defer fake.sleepMutex.Unlock()
	fake.SleepStub = stub
}

func (fake *FakeMemoryGobbler) SleepArgsForCall(i int) time.Duration {
	fake.sleepMutex.RLock()
	defer fake.sleepMutex.RUnlock()
	argsForCall := fake.sleepArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMemoryGobbler) StopTest() {
	fake.stopTestMutex.Lock()
	fake.stopTestArgsForCall = append(fake.stopTestArgsForCall, struct {
	}{})
	stub := fake.StopTestStub
	fake.recordInvocation("StopTest", []interface{}{})
	fake.stopTestMutex.Unlock()
	if stub != nil {
		fake.StopTestStub()
	}
}

func (fake *FakeMemoryGobbler) StopTestCallCount() int {
	fake.stopTestMutex.RLock()
	defer fake.stopTestMutex.RUnlock()
	return len(fake.stopTestArgsForCall)
}

func (fake *FakeMemoryGobbler) StopTestCalls(stub func()) {
	fake.stopTestMutex.Lock()
	defer fake.stopTestMutex.Unlock()
	fake.StopTestStub = stub
}

func (fake *FakeMemoryGobbler) UseMemory(arg1 uint64) {
	fake.useMemoryMutex.Lock()
	fake.useMemoryArgsForCall = append(fake.useMemoryArgsForCall, struct {
		arg1 uint64
	}{arg1})
	stub := fake.UseMemoryStub
	fake.recordInvocation("UseMemory", []interface{}{arg1})
	fake.useMemoryMutex.Unlock()
	if stub != nil {
		fake.UseMemoryStub(arg1)
	}
}

func (fake *FakeMemoryGobbler) UseMemoryCallCount() int {
	fake.useMemoryMutex.RLock()
	defer fake.useMemoryMutex.RUnlock()
	return len(fake.useMemoryArgsForCall)
}

func (fake *FakeMemoryGobbler) UseMemoryCalls(stub func(uint64)) {
	fake.useMemoryMutex.Lock()
	defer fake.useMemoryMutex.Unlock()
	fake.UseMemoryStub = stub
}

func (fake *FakeMemoryGobbler) UseMemoryArgsForCall(i int) uint64 {
	fake.useMemoryMutex.RLock()
	defer fake.useMemoryMutex.RUnlock()
	argsForCall := fake.useMemoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMemoryGobbler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isRunningMutex.RLock()
	defer fake.isRunningMutex.RUnlock()
	fake.sleepMutex.RLock()
	defer fake.sleepMutex.RUnlock()
	fake.stopTestMutex.RLock()
	defer fake.stopTestMutex.RUnlock()
	fake.useMemoryMutex.RLock()
	defer fake.useMemoryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMemoryGobbler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ app.MemoryGobbler = new(FakeMemoryGobbler)
