---
name: ((deployment_name))

releases:
- name: app-autoscaler
  version: latest
- name: postgres
  version: latest
- name: bosh-dns-aliases
  version: latest
- name: routing
  version: latest
- name: loggregator-agent
  version: latest
- name: bpm
  version: latest

domains:
  postgres: &postgres_domain ((deployment_name)).autoscalerpostgres.service.cf.internal
  api: &api_domain ((deployment_name)).apiserver.service.cf.internal
  scheduler: &scheduler_domain ((deployment_name)).autoscalerscheduler.service.cf.internal
  servicebroker: &servicebroker_domain ((deployment_name)).servicebroker.service.cf.internal
  eventgenerator: &eventgenerator_domain ((deployment_name)).eventgenerator.service.cf.internal
  scalingengine: &scalingengine_domain ((deployment_name)).scalingengine.service.cf.internal
  metricsgateway: &metricsgateway_domain ((deployment_name)).metricsgateway.service.cf.internal
  metricsserver: &metricsserver_domain ((deployment_name)).metricsserver.service.cf.internal

public_domains:
  metricsforwarder: &metricsforwarder_public_domain ((deployment_name))metrics.((system_domain))
  metricsforwarder_mtls: &metricsforwarder_mtls_public_domain ((deployment_name))-metricsforwarder-mtls.((system_domain))
  servicebroker: &servicebroker_public_domain ((deployment_name))servicebroker.((system_domain))

features:
  use_dns_addresses: true

addons:
- name: bosh-dns-aliases
  jobs:
  - name: bosh-dns-aliases
    release: bosh-dns-aliases
    properties:
      aliases:
      - domain: *postgres_domain
        targets:
          - query: '*'
            instance_group: postgres
            deployment: ((deployment_name))
            network: default
            domain: bosh
      - domain: *api_domain
        targets:
          - query: '*'
            instance_group: apiserver
            deployment: ((deployment_name))
            network: default
            domain: bosh
      - domain: *scheduler_domain
        targets:
          - query: '*'
            instance_group: scheduler
            deployment: ((deployment_name))
            network: default
            domain: bosh
      - domain: *servicebroker_domain
        targets:
          - query: '*'
            instance_group: apiserver
            deployment: ((deployment_name))
            network: default
            domain: bosh
      - domain: *eventgenerator_domain
        targets:
          - query: '*'
            instance_group: eventgenerator
            deployment: ((deployment_name))
            network: default
            domain: bosh
      - domain: *scalingengine_domain
        targets:
          - query: '*'
            instance_group: scalingengine
            deployment: ((deployment_name))
            network: default
            domain: bosh
      - domain: *metricsgateway_domain
        targets:
          - query: '*'
            instance_group: metricsgateway
            deployment: ((deployment_name))
            network: default
            domain: bosh
      - domain: *metricsserver_domain
        targets:
          - query: '*'
            instance_group: metricsserver
            deployment: ((deployment_name))
            network: default
            domain: bosh
      # Cf internal names
      - domain: nats.service.cf.internal
        targets:
          - deployment: cf
            domain: bosh
            instance_group: nats
            network: default
            query: '*'
      - domain: reverse-log-proxy.service.cf.internal
        targets:
          - query: '*'
            instance_group: log-api
            deployment: cf
            network: default
            domain: bosh
      - domain: _.nats.service.cf.internal
        targets:
          - deployment: cf
            domain: bosh
            instance_group: nats
            network: default
            query: _
      - domain: logcache
        targets:
          - deployment: cf
            domain: bosh
            instance_group: log-cache
            network: default
            query: '*'
      - domain: log-cache.service.cf.internal
        targets:
          - deployment: cf
            domain: bosh
            instance_group: log-cache
            network: default
            query: '*'
- name: bpm
  jobs:
    - name: bpm
      release: bpm

### Stemcells ###
stemcells:
- alias: default
  os: ubuntu-jammy
  version: latest

instance_groups:
# Postgres Instance Group
- name: postgres
  azs:
    - z1
  instances: 1
  update:
    serial: true
  stemcell: default
  vm_type: small
  networks:
    - name: default
  jobs:
    - name: postgres
      release: postgres
      properties:
        databases: &database
          sslmode: verify-full
          tls: &db_tls
            ca: ((postgres_ca.ca))
            certificate: ((postgres_server.certificate))
            private_key: ((postgres_server.private_key))
          databases:
            - name: autoscaler
              tag: default
          db_scheme: postgres
          address: *postgres_domain
          port: 5432
          roles:
            - name: postgres
              password: "((database_password))"
              tag: default
          connection_config: &databaseConnectionConfig
            max_open_connections: 100
            max_idle_connections: 10
            connection_max_lifetime: 60s

# Scalingengine Instance Group
- name: scalingengine
  azs:
    - z1
  instances: 1
  vm_type: minimal
  stemcell: default
  networks:
    - name: default
  jobs:
    - name: scalingengine
      release: app-autoscaler
      properties:
        autoscaler:
          scalingengine_db: *database
          scalingengine_db_connection_config: *databaseConnectionConfig
          scheduler_db: *database
          scheduler_db_connection_config: *databaseConnectionConfig
          policy_db: *database
          policy_db_connection_config: *databaseConnectionConfig
          cf: &cf_credentials
            api: "https://api.((system_domain))"
            grant_type: client_credentials
            client_id: "((cf_client_id))"
            secret: "((cf_client_secret))"
            skip_ssl_validation: "((skip_ssl_validation))"
          scalingengine:
            health:
              port: &scalingEngineHealthPort 6204
              username: scalingengine
              password: ((autoscaler_scalingengine_health_password))
            logging:
              level: info
            ca_cert: ((app_autoscaler_ca_cert.ca))
            server_cert: ((scalingengine_server_cert.certificate))
            server_key: ((scalingengine_server_cert.private_key))
    - name: route_registrar
      release: routing
      consumes:
        nats: { from: nats, deployment: cf }
      properties:
        route_registrar:
          routes:
            - name: autoscaler_scalingengine_health
              registration_interval: 20s
              port: *scalingEngineHealthPort
              tags:
                component: autoscaler_scalingengine_health
              uris:
                - ((deployment_name))-scalingengine.((system_domain))

  # APIServer Instance Group
- name: apiserver
  azs:
   - z1
  instances: 1
  vm_type: minimal
  stemcell: default
  networks:
  - name: default
  jobs:
  - name: golangapiserver
    release: app-autoscaler
    properties:
      autoscaler:
        apiserver:
          public_api:
            server:
              port: &publicApiServerPort 6101
          use_buildin_mode: false
          scheduler:
            ca_cert: ((!scheduler_client_cert.ca))
            client_cert: ((!scheduler_client_cert.certificate))
            client_key: ((!scheduler_client_cert.private_key))
            host: *scheduler_domain
          scaling_engine:
            ca_cert: ((!scalingengine_client_cert.ca))
            client_cert: ((!scalingengine_client_cert.certificate))
            client_key: ((!scalingengine_client_cert.private_key))
            host: *scalingengine_domain
          metrics_collector:
            ca_cert: ((!metricsserver_client_cert.ca))
            client_cert: ((!metricsserver_client_cert.certificate))
            client_key: ((!metricsserver_client_cert.private_key))
            host: *metricsserver_domain
          event_generator:
            ca_cert: ((!eventgenerator_client_cert.ca))
            client_cert: ((!eventgenerator_client_cert.certificate))
            client_key: ((!eventgenerator_client_cert.private_key))
            host: *eventgenerator_domain
          metrics_forwarder:
            host: *metricsforwarder_public_domain
            mtls_host: *metricsforwarder_mtls_public_domain
          broker:
            broker_credentials:
              - broker_username: 'autoscaler-broker-user'
                broker_password: ((!service_broker_password))
              - broker_username: 'autoscaler-broker-user-blue'
                broker_password: ((!service_broker_password_blue))
            server:
              port: &brokerServerPort 6102
              catalog:
                services:
                - id: autoscaler-guid
                  name: ((deployment_name))
                  description: Automatically increase or decrease the number of application instances based on a policy you define.
                  bindable: true
                  instances_retrievable: true
                  bindings_retrievable: true
                  tags:
                    - app-autoscaler
                  plans:
                    - id: autoscaler-free-plan-id
                      name: autoscaler-free-plan
                      description: This is the free service plan for the Auto-Scaling service.

              dashboard_redirect_uri: ""
        cf: *cf_credentials
        binding_db: *database
        policy_db: *database
        policy_db_connection_config: *databaseConnectionConfig
  - name: route_registrar
    release: routing
    consumes:
      nats: { from: nats, deployment: cf }
    properties:
      route_registrar:
        routes:
        - name: api_server
          registration_interval: 20s
          port: *publicApiServerPort
          tags:
            component: api_server
          uris:
            - ((deployment_name)).((system_domain))
        - name: autoscaler_service_broker
          registration_interval: 20s
          port: *brokerServerPort
          tags:
            component: autoscaler_service_broker
          uris:
            - *servicebroker_public_domain

  # Scheduler Instance Group
- name: scheduler
  azs:
    - z1
  instances: 1
  vm_type: minimal
  stemcell: default
  networks:
  - name: default
  jobs:
  - name: scheduler
    release: app-autoscaler
    properties:
      autoscaler:
        policy_db: *database
        scheduler_db: *database
        scheduler:
          health:
            port: &schedulerHealthPort 6202
            basicAuthEnabled: true
            username: scheduler
            password: ((autoscaler_scheduler_health_password))
          job_reschedule_interval_millisecond: 10000
          job_reschedule_maxcount: 6
          notification_reschedule_maxcount: 3
          ca_cert: ((!scheduler_server_cert.ca))
          server_cert: ((!scheduler_server_cert.certificate))
          server_key: ((!scheduler_server_cert.private_key))
          scaling_engine:
            ca_cert: ((!scalingengine_client_cert.ca))
            client_cert: ((!scalingengine_client_cert.certificate))
            client_key: ((!scalingengine_client_cert.private_key))
            host: *scalingengine_domain
  - name: route_registrar
    release: routing
    consumes:
      nats: {from: nats, deployment: cf}
    properties:
      route_registrar:
        routes:
        - name: autoscaler_scheduler_health
          registration_interval: 20s
          port: *schedulerHealthPort
          tags:
            component: autoscaler_scheduler_health
          uris:
            - ((deployment_name))-scheduler.((system_domain))

# Operator Instance Group
- name: operator
  azs:
  - z1
  instances: 1
  vm_type: minimal
  update:
    serial: true
  stemcell: default
  networks:
  - name: default
  jobs:
  - name: operator
    release: app-autoscaler
    properties:
      autoscaler:
        instancemetrics_db: *database
        instancemetrics_db_connection_config: *databaseConnectionConfig
        appmetrics_db: *database
        appmetrics_db_connection_config: *databaseConnectionConfig
        scalingengine_db: *database
        scalingengine_db_connection_config: *databaseConnectionConfig
        lock_db: *database
        policy_db: *database
        policy_db_connection_config: *databaseConnectionConfig
        scheduler.host: *scheduler_domain
        cf: *cf_credentials
        operator:
          enable_db_lock: true
          health:
            port: &operatorHealthPort 6208
            username: operator
            password: ((autoscaler_operator_health_password))
          scaling_engine:
            ca_cert: ((!scalingengine_client_cert.ca))
            client_cert: ((!scalingengine_client_cert.certificate))
            client_key: ((!scalingengine_client_cert.private_key))
            host: *scalingengine_domain
          scheduler:
            ca_cert: ((!scheduler_client_cert.ca))
            client_cert: ((!scheduler_client_cert.certificate))
            client_key: ((!scheduler_client_cert.private_key))
            host: *scheduler_domain
          logging:
            level: info
  - name: route_registrar
    release: routing
    consumes:
      nats: {from: nats, deployment: cf}
    properties:
      route_registrar:
        routes:
          - name: autoscaler_operator_health
            registration_interval: 20s
            port: *operatorHealthPort
            tags:
              component: autoscaler_operator_health
            uris:
              - ((deployment_name))-operator.((system_domain))

# Metricsserver
- name: metricsserver
  azs:
    - z1
  instances: 1
  vm_type: minimal
  stemcell: default
  networks:
  - name: default
  jobs:
  - name: metricsserver
    release: app-autoscaler
    properties:
      autoscaler:
        instancemetrics_db: *database
        instancemetrics_db_connection_config: *databaseConnectionConfig
        policy_db: *database
        policy_db_connection_config: *databaseConnectionConfig
        metricsserver:
          logging:
            level: info
          server:
            port: &metricsserverPort 6103
          http_client_timeout: 60s
          ca_cert: ((!metricsserver_server_cert.ca))
          server_cert: ((!metricsserver_server_cert.certificate))
          server_key: ((!metricsserver_server_cert.private_key))
          collector:
            keep_alive_time: 60s
            refresh_interval: 60s
            collect_interval: 60s
            save_interval: 5s
            persist_metrics: true
            envelope_processor_count: 4
            metric_cache_size_per_app: 1000
            envelope_channel_size: 1000
            metric_channel_size: 1000
          health:
            port: &metricsserverHealthPort 6303
            username: metricsserver
            password: ((autoscaler_metricsserver_health_password))
  - name: route_registrar
    release: routing
    consumes:
      nats: {from: nats, deployment: cf}
    properties:
      route_registrar:
        routes:
          - name: autoscaler_metricsserver_health
            registration_interval: 20s
            port: *metricsserverHealthPort
            tags:
              component: autoscaler_metricsserver_health
            uris:
              - ((deployment_name))-metricsserver.((system_domain))

# Metricsgateway
- name: metricsgateway
  azs:
  - z1
  instances: 1
  vm_type: minimal
  stemcell: default
  networks:
  - name: default
  jobs:
  - name: metricsgateway
    release: app-autoscaler
    properties:
      autoscaler:
        policy_db: *database
        policy_db_connection_config.max_open_connections: *databaseConnectionConfig
        metricsgateway:
          logging:
            level: info
          envelop_chan_size: 1000
          nozzle_count: 4
          app_manager:
            app_refresh_interval: 5s
          emitter:
            buffer_size: 500
            keep_alive_interval: 5s
            handshake_timeout: 1s
            max_setup_retry_count: 3
            max_close_retry_count: 3
            retry_delay: 1s
            metricsserver_client:
              ca_cert: ((!metricsserver_client_cert.ca))
              cert: ((!metricsserver_client_cert.certificate))
              key: ((!metricsserver_client_cert.private_key))
          nozzle:
            rlp_addr: "reverse-log-proxy.service.cf.internal:8082"
            shard_id: "CF_AUTOSCALER"
            loggregator_rlp_tls:
              cert: ((loggregator_tls_rlp.certificate))
              key: ((loggregator_tls_rlp.private_key))
              ca_cert: ((loggregator_ca.certificate))
          health:
            port: &metricsgatewayHealthPort 6503
            username: metricsgateway
            password: ((autoscaler_metricsgateway_health_password))
  - name: route_registrar
    release: routing
    consumes:
      nats: {from: nats, deployment: cf}
    properties:
      route_registrar:
        routes:
        - name: autoscaler_metricsgateway_health
          registration_interval: 20s
          port: *metricsgatewayHealthPort
          tags:
            component: autoscaler_metricsgateway_health
          uris:
            - ((deployment_name))-metricsgateway.((system_domain))

# Eventgenerator Instance Group
- name: eventgenerator
  azs:
  - z1
  instances: 1
  vm_type: minimal
  stemcell: default
  networks:
  - name: default
  jobs:
  - name: eventgenerator
    release: app-autoscaler
    properties:
      autoscaler:
        appmetrics_db: *database
        appmetrics_db_connection_config: *databaseConnectionConfig
        policy_db: *database
        policy_db_connection_config: *databaseConnectionConfig
        lock_db: *database
        eventgenerator:
          health:
            port: &eventGeneratorHealthPort 6205
            username: eventgenerator
            password: ((autoscaler_eventgenerator_health_password))
          logging:
            level: info
          ca_cert: ((!eventgenerator_server_cert.ca))
          server_cert: ((!eventgenerator_server_cert.certificate))
          server_key: ((!eventgenerator_server_cert.private_key))
          enable_db_lock: false
          scaling_engine:
            ca_cert: ((!scalingengine_client_cert.ca))
            client_cert: ((!scalingengine_client_cert.certificate))
            client_key: ((!scalingengine_client_cert.private_key))
            host: *scalingengine_domain
          metricscollector:
            ca_cert: ((!metricsserver_client_cert.ca))
            client_cert: ((!metricsserver_client_cert.certificate))
            client_key: ((!metricsserver_client_cert.private_key))
            port: *metricsserverPort
            host: *metricsserver_domain
  - name: route_registrar
    release: routing
    consumes:
      nats: {from: nats, deployment: cf}
    properties:
      route_registrar:
        routes:
          - name: autoscaler_eventgenerator_health
            registration_interval: 20s
            port: *eventGeneratorHealthPort
            tags:
              component: autoscaler_eventgenerator_health
            uris:
              - ((deployment_name))-eventgenerator.((system_domain))

# Metricsforwarder Instance Group
- name: metricsforwarder
  azs:
    - z1
  instances: 1
  vm_type: minimal
  stemcell: default
  networks:
  - name: default
  jobs:
  - name: metricsforwarder
    release: app-autoscaler
    properties:
      autoscaler:
        policy_db: *database
        policy_db_connection_config: *databaseConnectionConfig
        metricsforwarder:
          health:
            port: &metricsforwarderHealthPort 6403
            username: metricsforwarder
            password: ((autoscaler_metricsforwarder_health_password))
          logging:
            level: info
          server:
            port: &metricsforwarderServerPort 6201
          loggregator:
            tls:
              ca_cert: ((loggregator_tls_agent.ca))
              cert: ((loggregator_tls_agent.certificate))
              key: ((loggregator_tls_agent.private_key))
        storedprocedure_db: *database
  - name: loggregator_agent
    release: loggregator-agent
    consumes:
      doppler:
        from: doppler
        deployment: cf
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          agent:
            cert: ((loggregator_tls_agent.certificate))
            key: ((loggregator_tls_agent.private_key))
      metrics:
        ca_cert: ((loggregator_agent_metrics_tls.ca))
        cert: ((loggregator_agent_metrics_tls.certificate))
        key: ((loggregator_agent_metrics_tls.private_key))
        server_name: loggregator_agent_server
  - name: route_registrar
    release: routing
    consumes:
      nats: { from: nats, deployment: cf }
    properties:
      route_registrar:
        routes:
          - name: autoscaler_metrics_forwarder
            registration_interval: 20s
            port: *metricsforwarderServerPort
            tags:
              component: autoscaler_metrics_forwarder
            uris:
              - *metricsforwarder_public_domain
          - name: autoscaler_metrics_forwarder_mtls
            registration_interval: 20s
            port: *metricsforwarderServerPort
            tags:
              component: autoscaler_metrics_forwarder
            uris:
              - *metricsforwarder_mtls_public_domain
          - name: autoscaler_metricsforwarder_health
            registration_interval: 20s
            port: *metricsforwarderHealthPort
            tags:
              component: autoscaler_metricsforwarder_health
            uris:
              - ((deployment_name))-metricsforwarder.((system_domain))

update:
  canaries: 1
  canary_watch_time: 1000-300000
  max_in_flight: 3
  update_watch_time: 1000-300000
  serial: true

variables:
- name: database_password
  type: password
- name: uaa_secret
  type: password
  options:
    length: 128
- name: uaa_client_id
  type: password
  options:
    length: 128
- name: autoscaler_eventgenerator_health_password
  type: password
- name: service_broker_password
  type: password
  options:
    length: 128
- name: service_broker_password_blue
  type: password
  options:
    length: 128
- name: autoscaler_metricsforwarder_health_password
  type: password
- name: autoscaler_metricsgateway_health_password
  type: password
- name: autoscaler_metricsserver_health_password
  type: password
- name: app_autoscaler_sbss_restricted_dbuser_password
  type: password
  options:
    length: 128
- name: autoscaler_operator_health_password
  type: password
- name: app_autoscaler_sbss_restricted_dbuser_password_blue
  type: password
  options:
    length: 128
- name: dashboard_client_id
  type: password
  options:
    length: 128
- name: dashboard_client_secret
  type: password
  options:
    length: 128
- name: api_client_id
  type: password
  options:
    length: 128
- name: api_client_secret
  type: password
  options:
    length: 128
- name: auditlog_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: dashboard_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: autoscaler_scheduler_health_password
  type: password
- name: ratelimiter_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: metriccollector_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: scalingengine_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: eventgenerator_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: scheduler_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: apiserver_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: metricsforwarder_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: autoscaler_scalingengine_health_password
  type: password
- name: metricsgateway_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: metricsserver_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: operator_monitor_basic_auth_password
  type: password
  options:
    length: 128
- name: app_autoscaler_ca_cert
  type: certificate
  options:
    is_ca: true
    common_name: autoscalerCA
    key_length: 4096
    duration: 180
- name: apiserver_server_cert
  type: certificate
  update_mode: converge
  options:
    ca: app_autoscaler_ca_cert
    common_name: *api_domain
    alternative_names:
    - *api_domain
    extended_key_usage:
    - client_auth
    - server_auth
    key_length: 4096
    duration: 180
- name: servicebroker_server_cert
  type: certificate
  update_mode: converge
  options:
    ca: app_autoscaler_ca_cert
    common_name: *servicebroker_domain
    alternative_names:
    - *servicebroker_domain
    extended_key_usage:
    - client_auth
    - server_auth
    key_length: 4096
    duration: 180
- name: scheduler_server_cert
  type: certificate
  update_mode: converge
  options:
    ca: app_autoscaler_ca_cert
    common_name: *scheduler_domain
    alternative_names:
    - *scheduler_domain
    extended_key_usage:
    - client_auth
    - server_auth
    key_length: 4096
    duration: 180
- name: scheduler_client_cert
  type: certificate
  options:
    ca: app_autoscaler_ca_cert
    common_name: scheduler_client
    extended_key_usage:
    - client_auth
    key_length: 4096
    duration: 180
- name: eventgenerator_server_cert
  type: certificate
  update_mode: converge
  options:
    ca: app_autoscaler_ca_cert
    common_name: *eventgenerator_domain
    alternative_names:
    - *eventgenerator_domain
    extended_key_usage:
    - client_auth
    - server_auth
    key_length: 4096
    duration: 180
- name: eventgenerator_client_cert
  type: certificate
  options:
    ca: app_autoscaler_ca_cert
    common_name: eventgenerator_client
    extended_key_usage:
    - client_auth
    key_length: 4096
    duration: 180
- name: metricsserver_server_cert
  type: certificate
  options:
    ca: app_autoscaler_ca_cert
    common_name: *metricsserver_domain
    alternative_names:
    - *metricsserver_domain
    - "*.metricsserver.default.((deployment_name)).bosh"

    extended_key_usage:
    - client_auth
    - server_auth
    key_length: 4096
    duration: 180
- name: metricsserver_client_cert
  type: certificate
  options:
    ca: app_autoscaler_ca_cert
    common_name: metricsserver_client
    extended_key_usage:
    - client_auth
    key_length: 4096
    duration: 180
- name: scalingengine_server_cert
  type: certificate
  update_mode: converge
  options:
    ca: app_autoscaler_ca_cert
    common_name: *scalingengine_domain
    alternative_names:
    - *scalingengine_domain
    extended_key_usage:
    - client_auth
    - server_auth
    key_length: 4096
    duration: 180
- name: scalingengine_client_cert
  type: certificate
  options:
    ca: app_autoscaler_ca_cert
    common_name: scalingengine_client
    extended_key_usage:
    - client_auth
    key_length: 4096
    duration: 180
- name: metric_scraper_ca
  type: certificate
  options:
    common_name: metricScraperCA
    is_ca: true
- name: loggregator_agent_metrics_tls
  type: certificate
  update_mode: converge
  options:
    ca: metric_scraper_ca
    common_name: loggregator_agent_server
    alternative_names:
      - loggregator_agent_server
    extended_key_usage:
      - server_auth
